<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>selenium</title>
      <link href="/2022/08/18/selenium/"/>
      <url>/2022/08/18/selenium/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium-spider"><a href="#Selenium-spider" class="headerlink" title="Selenium spider"></a>Selenium spider</h1><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><pre class="line-numbers language-python"><code class="language-python">    pip install selenium    <span class="token comment" spellcheck="true"># download the browser driver ![chrome](https://chromedriver.storage.googleapis.com/index.html?path=104.0.5112.79/)</span>    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Element-hunter"><a href="#Element-hunter" class="headerlink" title="Element hunter"></a>Element hunter</h2><pre class="line-numbers language-python"><code class="language-python">    find_element_by_id<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_tag_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    fing_element_by_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_xpath<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_css_selector<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Browser-operation"><a href="#Browser-operation" class="headerlink" title="Browser operation"></a>Browser operation</h2><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>set_window_size<span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># clear the text</span>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># simulate the input</span>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># click the element</span>    search_text <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>    search_text<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'selenium'</span><span class="token punctuation">)</span>    search_text<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mouse-operation"><a href="#Mouse-operation" class="headerlink" title="Mouse operation"></a>Mouse operation</h2><ul><li>perform(): execute the actions stored in ActionChains</li><li>context_click(): right click</li><li>double_click(): double clicks</li><li>drag_and_drop(): drag element</li><li>move_to_element(): suspend above element</li></ul><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.cn'</span><span class="token punctuation">)</span>    above <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">"设置"</span><span class="token punctuation">)</span>    ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>above<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Keyboard-operation"><a href="#Keyboard-operation" class="headerlink" title="Keyboard operation"></a>Keyboard operation</h2><ul><li></li><li>send_keys()： <em>Keys.BACK_SPACE</em> <em>Keys.CONTROL, ‘a’</em> <em>Keys.F1</em></li></ul><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>BACK_SPACE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">    title <span class="token operator">=</span> driver<span class="token punctuation">.</span>title    now_url <span class="token operator">=</span> driver<span class="token punctuation">.</span>current_url    user <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'nums'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC    driver<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)</span>    element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    drivet<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://somedomain/url_that_delays_loading"</span><span class="token punctuation">)</span>    myDynamicElement <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"myDynamicElement"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># switch between windows</span>    xf <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="x-URS-iframe"'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># choose from select box</span>    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>select <span class="token keyword">import</span> Select    Select<span class="token punctuation">(</span>xf<span class="token punctuation">)</span><span class="token punctuation">.</span>select_by_value<span class="token punctuation">(</span><span class="token string">'50'</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>switch_to_frame<span class="token punctuation">(</span>xf<span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>switch_to_default_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Alert-frame"><a href="#Alert-frame" class="headerlink" title="Alert frame"></a>Alert frame</h2><p><code>alert = driver.switch_to_alert()</code></p><ul><li>attribute: text | accept | dismiss | send_keys()</li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'D:\\upload_file.txt'</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get_screenshot_as_file<span class="token punctuation">(</span><span class="token string">"D:\\baidu_img.jpg"</span><span class="token punctuation">)</span>    js <span class="token operator">=</span> <span class="token string">"window.scrollTo(100, 450);"</span>    driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pose_Estimation</title>
      <link href="/2022/08/18/pose-estimation/"/>
      <url>/2022/08/18/pose-estimation/</url>
      
        <content type="html"><![CDATA[<p><strong>0818</strong></p><ol><li><p>strengthen the difference between keypoints<br> The problem why sometimes the model’s output mismatched is due to the weak feature learned for each keypoints.</p><p> And it comes to the dillima. We seem to enhance the feature difference by adding the texture which is indeed the thing we try to avoid by style transfer</p></li><li><p>strange observation<br> The Grammar correction in chrome limit the utterance comment to be one character input:D</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pose_Estimation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAN_articles</title>
      <link href="/2022/08/18/gan-articles/"/>
      <url>/2022/08/18/gan-articles/</url>
      
        <content type="html"><![CDATA[<h2 id="GAN-Articles"><a href="#GAN-Articles" class="headerlink" title="GAN_Articles"></a>GAN_Articles</h2><h3 id="ON-Convergence-and-stability-of-GANs-2017"><a href="#ON-Convergence-and-stability-of-GANs-2017" class="headerlink" title="ON Convergence and stability of GANs(2017)"></a>ON Convergence and stability of GANs(2017)</h3><p><strong><em>Deep Regret Analytic Generative Adversarial Networks</em></strong></p><ol><li>regret minimization is the more appropriate way to think about GAN training dynamics</li><li>previous view off mode collapse and instability is that it results from <strong>attempting to minimize a strong divergence</strong> during training, authors argued to be not ture</li><li>mode collapse situations are often accompanied by sharp gradients of the discriminator function around some real data points</li><li>view alternating gradient updates procedures as regret minimization</li><li>prove the asymptotic convergence of GAN training in the non-parametric limit without requirements of discriminator to be optimal at each step</li><li>AGD can converge to a potentially bad local equilibrium in non-convex games and hypothesize this to be responsible for mode collapse</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tutorial for online training</title>
      <link href="/2022/08/06/tutorial-for-online-training/"/>
      <url>/2022/08/06/tutorial-for-online-training/</url>
      
        <content type="html"><![CDATA[<h1 id="GPU-Online-Training-Tutorial"><a href="#GPU-Online-Training-Tutorial" class="headerlink" title="GPU Online Training Tutorial"></a>GPU Online Training Tutorial</h1><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ol><li>upload dataset and scripts by oss<pre class="line-numbers language-python"><code class="language-python"> oss login cp G<span class="token punctuation">:</span><span class="token operator">//</span>Datasets<span class="token operator">/</span>speedplus<span class="token punctuation">.</span>zip oss<span class="token punctuation">:</span><span class="token operator">//</span>datasets<span class="token operator">/</span> cp G<span class="token punctuation">:</span><span class="token operator">//</span>CodeSpace<span class="token operator">/</span>KE<span class="token punctuation">.</span>zip oss<span class="token punctuation">:</span><span class="token operator">//</span>datasets<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>upzip datasets &amp; project<pre class="line-numbers language-python"><code class="language-python"> oss cp oss<span class="token punctuation">:</span><span class="token operator">//</span>datasets<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>zip <span class="token operator">/</span>hy<span class="token operator">-</span>tmp<span class="token operator">/</span> ls <span class="token operator">/</span>hy<span class="token operator">-</span>tmp<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>install necessary dependancies <pre class="line-numbers language-python"><code class="language-python"> pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><pre class="line-numbers language-python"><code class="language-python"> bash trainf1<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPU Training </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DL_Model_Training</title>
      <link href="/2022/08/05/dl-model-training/"/>
      <url>/2022/08/05/dl-model-training/</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h3 id="load-model"><a href="#load-model" class="headerlink" title="load model"></a>load model</h3><p><strong><code>load_state_dict == net.state_dict</code>key值</strong></p><pre class="line-numbers language-python"><code class="language-python">    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>checkpoint<span class="token punctuation">[</span><span class="token string">'net'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    model_dict <span class="token operator">=</span> net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    pretrained_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> checkpoint<span class="token punctuation">[</span><span class="token string">'net'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> k <span class="token keyword">in</span> model_dict<span class="token punctuation">}</span>    model_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>pretrained_dict<span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="freeze-model"><a href="#freeze-model" class="headerlink" title="freeze model"></a>freeze model</h3><pre class="line-numbers language-python"><code class="language-python">    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Aadm<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">.</span>requires_grad<span class="token punctuation">,</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># unfreeze the fc2 layer for extra tuning if needed</span>    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">True</span>    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">True</span>    optimizer<span class="token punctuation">.</span>add_param_group<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="load-optimizer"><a href="#load-optimizer" class="headerlink" title="load optimizer"></a>load optimizer</h3><pre class="line-numbers language-python"><code class="language-python">    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'initial_lr'</span><span class="token punctuation">:</span><span class="token number">0.001</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">2.0e-3</span><span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">.</span><span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Model Training </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Skills_Plus</title>
      <link href="/2022/07/26/python-skills-plus/"/>
      <url>/2022/07/26/python-skills-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li><p>zip</p><pre class="line-numbers language-python"><code class="language-python">  a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  zipped <span class="token operator">=</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  list<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span>  a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  list<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Keywords</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>  <span class="token keyword">finally</span><span class="token punctuation">:</span>  <span class="token keyword">global</span> variable  non<span class="token operator">-</span>local variable<span class="token punctuation">:</span> rather than <span class="token keyword">global</span><span class="token punctuation">,</span> declares a variable to point to variable of outside enclosing function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>print</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># without extraline</span>  l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>l<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># format output</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Total number is : %3d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{'Tom'} and {'Jerry'}"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Apple: {a:5d}, Orange: {o:8.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> o<span class="token operator">=</span><span class="token number">21.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  data <span class="token operator">=</span> dict<span class="token punctuation">(</span>fun<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">,</span> adj<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{a} and {b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>operator</p><pre class="line-numbers language-python"><code class="language-python">  min <span class="token operator">=</span> a <span class="token operator">&lt;</span> b <span class="token operator">and</span> a <span class="token operator">or</span> b  <span class="token comment" spellcheck="true"># overload</span>  <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>a<span class="token operator">=</span>a      <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> o<span class="token punctuation">.</span>a  <span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> A<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># any &amp; all</span>  all<span class="token punctuation">(</span>empty iterable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># true</span>  any<span class="token punctuation">(</span>empty iterable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># false</span>  slice<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> step<span class="token punctuation">)</span>  setitem<span class="token punctuation">(</span>object<span class="token punctuation">,</span> position<span class="token punctuation">,</span> value<span class="token punctuation">)</span>  delitem<span class="token punctuation">(</span>object<span class="token punctuation">,</span> position<span class="token punctuation">)</span>  getitem<span class="token punctuation">(</span>object<span class="token punctuation">,</span> position<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># == &amp; is</span>   <span class="token string">"is"</span> check memory location<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>String</p><pre class="line-numbers language-python"><code class="language-python">  string <span class="token operator">=</span> r<span class="token string">'this is \110\145'</span> <span class="token comment" spellcheck="true"># ignore the escape sequences in a string</span>  <span class="token comment" spellcheck="true"># string alignment</span>  String1 <span class="token operator">=</span> <span class="token string">"|{:&lt;10}|{:^10}|{:>10}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>- Listlist are *mutable* while tuple is immutable```python    # store in a list using map, split and strip functions    lst = list(map(int, input(&quot;Enter the integer elements:&quot;).strip().split()))[:n]    lst.extend([2, &#39;a&#39;, &#39;hihi&#39;])    # apply function to list    import functools    functools.reduce(lambda a,b:a+b, lst)</code></pre><ul><li><p>Set<br>unordered, cannot access by index</p><pre class="line-numbers language-python"><code class="language-python">  set1  <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>  set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  set1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Dictionary</p><pre class="line-numbers language-python"><code class="language-python">  Dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  Dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Array</p><pre class="line-numbers language-python"><code class="language-python">  array<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Loop</p><pre class="line-numbers language-python"><code class="language-python">  L1<span class="token punctuation">,</span> L2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> a<span class="token punctuation">,</span>b <span class="token keyword">in</span> zip<span class="token punctuation">(</span>L1<span class="token punctuation">,</span> L2<span class="token punctuation">)</span><span class="token punctuation">:</span>  d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2></li><li><p>Variable-length arguments<br>*args: Non-Keyword Arguments<br>**kwargs: Keyword Arguments<br>function_name.<strong>doc</strong>: docstring of function</p></li></ul><p><strong>when we pass a variable to a function, a new reference to the object is created. Same as in Java</strong><br><strong>when we pass a reference and change the received reference to something else, the connection between the passed and received parameter is broken</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># pass by reference or pass by value </span>    <span class="token keyword">def</span> <span class="token function">myFun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">120</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    myFun<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>    myFun<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    myFun<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>yield</li></ul><p><em>Return</em> sends a specified value back to its caller whereas <em>Yield</em> can produce a sequence of values.</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">simpleGenerationFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token number">1</span>        <span class="token keyword">yield</span> <span class="token number">2</span>    x <span class="token operator">=</span> simpleGenerationFun<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>lambda</p><pre class="line-numbers language-python"><code class="language-python">  x <span class="token operator">=</span> <span class="token string">'Today is Saturday'</span>  <span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># filter &amp; map</span>  a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>  filtered <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token punctuation">)</span>  mapped <span class="token operator">=</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>mapped<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>Functions are objects | can be passed as arguments to other functions | can return another function</strong></p>]]></content>
      
      
      <categories>
          
          <category> Techonology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Functions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>space_titanic</title>
      <link href="/2022/06/30/space-titanic/"/>
      <url>/2022/06/30/space-titanic/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="Feature-extraction"><a href="#Feature-extraction" class="headerlink" title="Feature extraction"></a>Feature extraction</h3><h4 id="Kaggle-Spaceship-Titanic"><a href="#Kaggle-Spaceship-Titanic" class="headerlink" title="Kaggle-Spaceship Titanic"></a>Kaggle-Spaceship Titanic</h4><ol><li><p>Data Statistics</p><ul><li>passengerId: unique ID. Format gggg_pp. gggg indicates passengers travel with same group</li><li>HomePlanet: discrete noun. can be replaced by digits.</li><li>CryoSleep: bool value. seems relevent to final result.</li><li>Cabin: deck/num/side. seems relevent to final result. need further discussion</li><li>Destination: like HomePlanet.</li><li>Age: discrete digits. can be assembled as bins.</li><li>VIP: bool value.</li><li>RoomService, FoodCourt, ShoppingMall, Spa, VRDeck: bill amount. process as Age.</li><li>Name: no use.</li><li>Transported: final results.</li></ul></li><li><p>Data Preprocess</p><ul><li>null value | error value :<br>mean, zero, etc depends on circumstance</li></ul></li><li><p>Model Training Strategy</p><ul><li>Decision Tree | RandomForest | KNN Classifier</li><li>K-Folder crossover</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Feature Extraction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch_base</title>
      <link href="/2022/05/26/pytorch-base/"/>
      <url>/2022/05/26/pytorch-base/</url>
      
        <content type="html"><![CDATA[<h1 id="natural-languare-processing"><a href="#natural-languare-processing" class="headerlink" title="natural languare processing"></a>natural languare processing</h1><h2 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h2><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ol><li>view() 只改变观察角度</li><li>numpy() from_numpy() 与原始张量共享同一块内存</li></ol><h3 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism"></a>Mechanism</h3><ul><li>broadcast 自动补齐，维度不足前面加1</li><li>autograd<br>|||<br>|no tracking | tracking|<br>|<code>with torch.no_grad()   .detach()</code>|<code>requires_grad=True x.grad</code>|</li><li><em>torch.nn</em> 实现高层API | <em>torch.nn.functional</em> 实现低层API(仅仅运算功能)</li><li>super(Linear, self).init()继承<em>nn.module</em>的构造函数</li><li><em><strong>init</strong>()</em>层中储存具有可学习参数的层，通过<strong>nn.Parameter()</strong>以parameter形式保存在Module中</li></ul><h2 id="Language-Model"><a href="#Language-Model" class="headerlink" title="Language Model"></a>Language Model</h2><h3 id="n-gram-Model"><a href="#n-gram-Model" class="headerlink" title="n-gram Model"></a>n-gram Model</h3><ul><li>uni bi tri<h3 id="数据缺失"><a href="#数据缺失" class="headerlink" title="数据缺失"></a>数据缺失</h3></li><li>加法平滑</li><li>折扣法</li><li>插值法<h3 id="Wordvector"><a href="#Wordvector" class="headerlink" title="Wordvector"></a>Wordvector</h3></li><li>Continuous Bag-of-Words: 上下文预测中间词</li><li>Skip-gram<h3 id="Hierarchical-Softmax-Negative-Sample"><a href="#Hierarchical-Softmax-Negative-Sample" class="headerlink" title="Hierarchical Softmax  Negative Sample"></a>Hierarchical Softmax  Negative Sample</h3></li><li>哈夫曼树构造：权重低码长长，降低计算复杂度</li><li>Global Vectors:统计全局词汇共现信息学习词向量</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Skills</title>
      <link href="/2022/04/01/python-skills/"/>
      <url>/2022/04/01/python-skills/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><ul><li><p>matplotlib.backend_bases.FigureCanvas </p></li><li><p>matplotlib.backend_bases.Renderer</p></li><li><p>matplotlib.artist.Artist 调用Renderer接口在Canvas绘图</p><ul><li>primitives: 标准图形对象(Line2D, text, Rectangle, image)</li><li>containers: figure, Axes, Axis<h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3></li></ul></li><li><p>annotate </p></li><li><p>errorbar | pie | GridSpec(非均匀子图)</p><h2 id="Python-tips"><a href="#Python-tips" class="headerlink" title="Python tips"></a>Python tips</h2><h3 id="map替换标签"><a href="#map替换标签" class="headerlink" title="map替换标签"></a>map替换标签</h3><pre class="line-numbers language-python"><code class="language-python">  c<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>  a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="text-encoder"><a href="#text-encoder" class="headerlink" title="text encoder"></a>text encoder</h3></li><li><p>sklearn.preprocessing.LabelEncoder(): <em>编码不连续数值或文本</em></p><ul><li><code>le.fit() | le.transform() | le.inverse_transform() | le.classes_</code></li></ul></li><li><p>sklearn.preprocessing.OneHotEncoder():<em>分类特征可能取值转变为二值特征</em></p><h3 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h3></li><li><p>隐藏<em>python</em>级别的警告</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> warnings    warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="variable-save"><a href="#variable-save" class="headerlink" title="variable save"></a>variable save</h3></li><li><p>shelve</p><pre class="line-numbers language-python"><code class="language-python">      <span class="token keyword">import</span> shelve      shelfFile <span class="token operator">=</span> shelve<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span>      cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zonphie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span>      shelfFile<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cat      shelfFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>pprint.pformat()</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> pprint  cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Zonphie'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span><span class="token string">'chubby'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Pooka'</span><span class="token punctuation">,</span><span class="token string">'desc'</span><span class="token punctuation">:</span><span class="token string">'fluffy'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  fileObj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'myCats.py'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  fileObj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'cats = '</span> <span class="token operator">+</span> pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  fileObj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="File-amp-Folder"><a href="#File-amp-Folder" class="headerlink" title="File &amp; Folder"></a>File &amp; Folder</h3></li><li><p>删除文件: <code>os.unlink(path)</code></p></li><li><p>删除空文件夹: <code>os.rmdir(path)</code></p></li><li><p>删除整个文件夹: <code>shutil.rmtree(path)</code></p></li><li><p>可恢复删除: </p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> send2trash  send2trash<span class="token punctuation">.</span>send2trash<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>遍历目录树: <code>os.walk(path)</code> 返回当前文件夹、子文件夹、文件</p><h4 id="zipfile"><a href="#zipfile" class="headerlink" title="zipfile"></a>zipfile</h4><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> zipfile  newZip <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'micky.txt'</span><span class="token punctuation">,</span> compress_type<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_EDFLATED<span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解压缩</span>  <span class="token keyword">import</span> os  newZip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token string">'.\\zip'</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'animals/micky.txt'</span><span class="token punctuation">,</span> <span class="token string">'G:\\animals\\folders'</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="file-search"><a href="#file-search" class="headerlink" title="file search"></a>file search</h4><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> glob  glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.txt'</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> fnmatch  fnmatch<span class="token punctuation">.</span>fnmatch<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># MD5判断重复文件</span>  <span class="token keyword">import</span> hashlib  m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>  f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>  m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  md5_value <span class="token operator">=</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="automatic-mail"><a href="#automatic-mail" class="headerlink" title="automatic mail"></a>automatic mail</h4><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> smtplib  <span class="token keyword">from</span> smtplib <span class="token keyword">import</span> SMTP_SSL <span class="token comment" spellcheck="true"># 加密邮件内容</span>  <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText  <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>image <span class="token keyword">import</span> MIMEImage  <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMlutipart  <span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header  host_server <span class="token operator">=</span> <span class="token string">'smtp.163.com'</span> <span class="token comment" spellcheck="true"># smtp server address</span>  sender_163 <span class="token operator">=</span> <span class="token string">'pythonauto_email@163.com'</span>  pwd <span class="token operator">=</span> <span class="token string">'DAFAPFAGGFA'</span> <span class="token comment" spellcheck="true">#邮件授权码</span>  receiver <span class="token operator">=</span> <span class="token string">'mingming@buaa.edu.cn'</span>  msg <span class="token operator">=</span> MIMEMlutipart<span class="token punctuation">(</span><span class="token punctuation">)</span>  mail_title <span class="token operator">=</span> <span class="token string">'automatic pythonauto_email'</span>  msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>mail_title<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender_163  msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  mail_content <span class="token operator">=</span> <span class="token string">'today is a sunny day'</span>  message_text <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>mail_content<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>message_text<span class="token punctuation">)</span>  image_data <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'G:\\image\\zpphine.jpg'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>  message_image <span class="token operator">=</span> MIMEImage<span class="token punctuation">(</span>image_data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  image_data<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>message_image<span class="token punctuation">)</span>  atta <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'G:\\cat.xlsx'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  atta<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename="cat.xlsx"'</span>  msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>atta<span class="token punctuation">)</span>  smtp <span class="token operator">=</span> SMTP_SSL<span class="token punctuation">(</span>host_server<span class="token punctuation">)</span>  smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender_163<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>  smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender_163<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mail has been send successfully!'</span><span class="token punctuation">)</span>  smtp<span class="token punctuation">.</span>quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><p>依赖:openpyxl, xlrd, xlwings</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> openpyxl  wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'G:\\habits.xlsx'</span><span class="token punctuation">)</span>  sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>get_sheet_by_name<span class="token punctuation">(</span><span class="token string">'Sheet3'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># obtain data via rows</span>  rows <span class="token operator">=</span> sheet<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>      <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create new sheet</span>  <span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook  wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>  sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'mysheet'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># write formula</span>  sheet<span class="token punctuation">[</span><span class="token string">'D1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'=SUM(D2:D14)'</span>  wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'formula.xlsx'</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> xlwings <span class="token keyword">as</span> xw  app <span class="token operator">=</span> xw<span class="token punctuation">.</span>App<span class="token punctuation">(</span>visible<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> add_book<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  wb <span class="token operator">=</span> app<span class="token punctuation">.</span>books<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'formula.xlsx'</span><span class="token punctuation">)</span>  wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>  wb<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># basic options</span>  sheet<span class="token punctuation">.</span>insert_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  sheet<span class="token punctuation">.</span>delete_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>  sheet<span class="token punctuation">.</span>move_range<span class="token punctuation">(</span><span class="token string">'A1:B2'</span><span class="token punctuation">,</span> rows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cols<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="decorate"><a href="#decorate" class="headerlink" title="decorate"></a>decorate</h3><ul><li>统一模板：<pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps  <span class="token keyword">def</span> <span class="token function">decorate</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>      @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>          result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>          <span class="token keyword">return</span> result      <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Pandas-tips"><a href="#Pandas-tips" class="headerlink" title="Pandas tips"></a>Pandas tips</h2><h3 id="datatime"><a href="#datatime" class="headerlink" title="datatime"></a>datatime</h3><ul><li><p>to_datetime | .dt.dayofweek | .dt.month</p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3></li><li><p>loc:通过选取标签索引数据<br>  <strong>标签索引会将切片末端包含进去</strong></p><pre class="line-numbers language-python"><code class="language-python">      df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'index0'</span><span class="token punctuation">]</span>      df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'index0'</span><span class="token punctuation">:</span><span class="token string">'index3'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>iloc:通过选取位置编号索引数据<br>  <strong>位置编号索引不会将切片末端包含进去</strong></p><pre class="line-numbers language-python"><code class="language-python">      df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>reset_index: 修改索引行，设置<em>drop=True</em>可丢弃原索引列</p></li><li><p>sort_values(by=’a’, ascending=True) | sort_index(axis=1)</p></li><li><p>data_analyse func</p><pre class="line-numbers language-python"><code class="language-python">  df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数据基本信息</span>  df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>  df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> value<span class="token operator">=</span>values<span class="token punctuation">)</span>  df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  df <span class="token operator">=</span> df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'AgeBand'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'AgeBand'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>pcut<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder  <span class="token keyword">for</span> feat <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Cabin'</span><span class="token punctuation">,</span> <span class="token string">'Ticket'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      lbl <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>      label_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> range<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      df<span class="token punctuation">[</span>feat<span class="token operator">+</span> <span class="token string">"_labelEncode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>label_dict<span class="token punctuation">)</span>      df<span class="token punctuation">[</span>feat <span class="token operator">+</span> <span class="token string">"_labelEncode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> lbl<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Onehot encoder</span>  <span class="token keyword">for</span> feat <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">,</span> <span class="token string">"Embark"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      x <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">,</span> prefix<span class="token operator">=</span>feat<span class="token punctuation">)</span>      df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>str<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'()'</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 数据重构</span>  pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span> left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  result_up<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_down<span class="token punctuation">)</span>  pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>result_up<span class="token punctuation">,</span> result_down<span class="token punctuation">]</span><span class="token punctuation">)</span>  text_left_up<span class="token punctuation">.</span>join<span class="token punctuation">(</span>text_right_up<span class="token punctuation">)</span>  result<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#列旋转为行</span>  result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 行旋转为列</span>  text<span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Fare'</span><span class="token punctuation">:</span><span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'Pclass'</span><span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Fare'</span><span class="token punctuation">:</span><span class="token string">'mean_fare'</span><span class="token punctuation">,</span><span class="token string">'Pclass'</span><span class="token punctuation">:</span><span class="token string">'count_pclass'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">,</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>stacked<span class="token operator">=</span><span class="token string">'True'</span><span class="token punctuation">)</span>  facet <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>text<span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span> aspect<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  facet<span class="token punctuation">.</span>map<span class="token punctuation">(</span>sns<span class="token punctuation">.</span>kdeplot<span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> shade<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  facet<span class="token punctuation">.</span>set<span class="token punctuation">(</span>xlim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  facet<span class="token punctuation">.</span>add_legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>text<span class="token punctuation">.</span>Pclass<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>text<span class="token punctuation">.</span>Pclass<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>text<span class="token punctuation">.</span>Pclass<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>model = [&#39;rfc&#39;, &#39;gddt&#39;]temp = []rfc = RandomForestClassifier(random_state=0)params = {&#39;n_estimators&#39;:[50, 100]}temp.append([rfc, params])for i in range(len(model)):    best_model = GridSearchCV(temp[i][0], param_grid=temp[i][1], refit=True, cv=5).fit(train, train_label)    print(model[i], &#39;:&#39;)    print(&#39;best parameters:&#39;, best_model.best_params_)</code></pre><pre><code># Pytorch ## Function### Tips- clone():不共享数据内存，但提供梯度回溯- detach():共享数据内存，不提供梯度回溯- new_tensor():不共享不提供- 类型转换: ```python    tensor.type(torch.IntTensor)    tensor.type_as(tensor)    tensor.int()</code></pre><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul><li>Sequential:简单串联各层计算，接收OrderedDict或者子模块作为参数<pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn  net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>      nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用OrderedDict</span>  <span class="token keyword">import</span> collections  net2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>      collections<span class="token punctuation">.</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>          <span class="token punctuation">(</span><span class="token string">'fc1'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token string">'relu1'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>RelU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token string">'fc2'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h2><ul><li><p>Hook</p><pre class="line-numbers language-python"><code class="language-python">          <span class="token keyword">class</span> <span class="token class-name">Hook</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                  self<span class="token punctuation">.</span>module_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  self<span class="token punctuation">.</span>features_in_hook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  self<span class="token punctuation">.</span>features_out_hook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> fea_in<span class="token punctuation">,</span> fea_out<span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hooker working"</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>module_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>module<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>feature_in_hook<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fea_in<span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>features_out_hook<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fea_out<span class="token punctuation">)</span>          <span class="token keyword">def</span> <span class="token function">plot_feature</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>              hh <span class="token operator">=</span> Hook<span class="token punctuation">(</span><span class="token punctuation">)</span>              model<span class="token punctuation">.</span>features<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>register_forward_hook<span class="token punctuation">(</span>hh<span class="token punctuation">)</span>              forward_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>hh<span class="token punctuation">.</span>module_name<span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>hh<span class="token punctuation">.</span>features_in_hook<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>hh<span class="token punctuation">.</span>features_out_hook<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>              out1 <span class="token operator">=</span> hh<span class="token punctuation">.</span>features_out_hook<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>              total_ft <span class="token operator">=</span> out1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>              first_item <span class="token operator">=</span> out1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>              plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">for</span> ftidx <span class="token keyword">in</span> range<span class="token punctuation">(</span>total_ft<span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token keyword">if</span> ftidx<span class="token operator">></span> <span class="token number">99</span><span class="token punctuation">:</span>                      <span class="token keyword">break</span>                  ft <span class="token operator">=</span> first_item<span class="token punctuation">[</span>ftidx<span class="token punctuation">]</span>                  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> ftidx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                  plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>                  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>ft<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CAM</p><pre class="line-numbers language-python"><code class="language-python">          <span class="token keyword">import</span> torch          <span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">import</span> vgg11<span class="token punctuation">,</span> resnet18<span class="token punctuation">,</span> resnet101<span class="token punctuation">,</span> resnext101_32x8d          <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt          <span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image          <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np          model <span class="token operator">=</span> vgg11<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>          img_path <span class="token operator">=</span> <span class="token string">'./dog.jpg'</span>          img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span>          rgb_img <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>          plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>          <span class="token keyword">from</span> pytorch_grad_cam <span class="token keyword">import</span> GradCAM<span class="token punctuation">,</span> ScoreCAM<span class="token punctuation">,</span> GradCAMPlusPlus<span class="token punctuation">,</span> AblationCAM<span class="token punctuation">,</span> XGradCAM<span class="token punctuation">,</span> EigenCAM<span class="token punctuation">,</span> FullGradCAM          <span class="token keyword">from</span> pytorch_grad_cam<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>model_targets <span class="token keyword">import</span> ClassifierOutputTarget          <span class="token keyword">from</span> pytorch_grad_cam<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>image <span class="token keyword">import</span> show_cam_on_image          <span class="token comment" spellcheck="true"># ScoreCAM 和AblationCAM需要batch_size</span>          target_layers <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">.</span>feature<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>          cam <span class="token operator">=</span> GradCAM<span class="token punctuation">(</span>model<span class="token operator">=</span>model<span class="token punctuation">,</span> target_layers<span class="token operator">=</span>target_layers<span class="token punctuation">)</span>          targets <span class="token operator">=</span> <span class="token punctuation">[</span>ClassifierOutputTarget<span class="token punctuation">]</span>          grayscale_cam <span class="token operator">=</span> cam<span class="token punctuation">(</span>input_tensor<span class="token operator">=</span>img_tensor<span class="token punctuation">,</span> targets<span class="token operator">=</span>targets<span class="token punctuation">)</span>          grayscale_cam <span class="token operator">=</span> grayscale_cam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>          cam_img <span class="token operator">=</span> show_cam_on_image<span class="token punctuation">(</span>rgb_img<span class="token punctuation">,</span> grayscale_cam<span class="token punctuation">,</span> use_rgb<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>cam_img<span class="token punctuation">)</span><span class="token punctuation">)</span>          Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>cam_img<span class="token punctuation">)</span>      ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>FlashTorch</p><pre><code>  ```python      import matplotlib.pyplot as plt      import torchvision.models as models      from flashtorch.utils import apply_transforms, load_image      from flashtorch.saliency import Backprop      model = models.alexnet(pretrained=True)      backprop = Backprop(model)      image = load_image(&#39;./image.jpg&#39;)      owl = apply_transforms(image)      target_class = 24      backprop.visualize(owl, target_class, guided=True, use_gpu=True)  ```</code></pre></li></ul><h2 id="Emotion-Classifier-APIs"><a href="#Emotion-Classifier-APIs" class="headerlink" title="Emotion Classifier APIs"></a>Emotion Classifier APIs</h2><ul><li><p>HuggingFace</p><pre class="line-numbers language-python"><code class="language-python">      <span class="token keyword">from</span> transformers <span class="token keyword">import</span> DistilBertTokenizerFast      <span class="token keyword">from</span> transformers <span class="token keyword">import</span> TFDistilBertForSequenceClassification<span class="token punctuation">,</span> TFTrainer<span class="token punctuation">,</span> TFTrainingArguments      tokenizer <span class="token operator">=</span> DistilBertTokenizerFast<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'distilbert-base-uncased'</span><span class="token punctuation">)</span>      train_encodings <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>train_texts<span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      val_encodings <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>val_texts<span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      test_encodings <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>test_texts<span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      training_args <span class="token operator">=</span> TFTrainingArguments<span class="token punctuation">(</span>          output_dir<span class="token operator">=</span><span class="token string">'./results'</span><span class="token punctuation">,</span>          num_train_epochs<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>          per_device_train_batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>          per_device_eval_batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>          warmup_steps<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>          weight_decay<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>          logging_dir<span class="token operator">=</span><span class="token string">'./logs'</span><span class="token punctuation">,</span>          logging_steps<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span>      model <span class="token operator">=</span> TFDistilBertForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'distilbert-base-uncased'</span><span class="token punctuation">)</span>      trainer <span class="token operator">=</span> TFTrainer<span class="token punctuation">(</span>          model<span class="token operator">=</span>model<span class="token punctuation">,</span>          args<span class="token operator">=</span>training_args<span class="token punctuation">,</span>          train_dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span>          eval_dataset<span class="token operator">=</span>eval_dataset<span class="token punctuation">)</span>      trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>simpletransformers</p><pre class="line-numbers language-python"><code class="language-python">      <span class="token keyword">from</span> simpletransformers<span class="token punctuation">.</span>classification <span class="token keyword">import</span> ClassificationModel      train_args <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">'num_train_epochs'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>          <span class="token string">'train_batch_size'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>          <span class="token string">'eval_batch_size'</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span>          <span class="token string">'warmup_steps'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>          <span class="token string">'weight_decay'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span>          <span class="token string">'logging_steps'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>          <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> <span class="token number">5e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>          <span class="token string">'fp16'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>          <span class="token string">'wandb_project'</span><span class="token punctuation">:</span> <span class="token string">'gallery'</span><span class="token punctuation">,</span>          <span class="token string">'wandb_kwargs'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'entity'</span><span class="token punctuation">:</span> <span class="token string">'wandb'</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>      model <span class="token operator">=</span> ClassificationModel<span class="token punctuation">(</span><span class="token string">'distilbert'</span><span class="token punctuation">,</span> <span class="token string">'distilbert-base-uncased'</span><span class="token punctuation">,</span> use_cuda<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> cuda_device<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args<span class="token operator">=</span>train_args<span class="token punctuation">)</span>      model<span class="token punctuation">.</span>train_model<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Gradient-Boosting-Descent-Machine"><a href="#Gradient-Boosting-Descent-Machine" class="headerlink" title="Gradient Boosting Descent Machine"></a>Gradient Boosting Descent Machine</h2><p><img src="https://zhuanlan.zhihu.com/p/99069186" alt="参考链接"></p><ul><li><p>GBDM: 每次迭代都需要遍历整个训练数据多次</p></li><li><p>XGBOOST: 基于预排序方法的决策树算法</p><ul><li>Level-wise 增长策略:不容易过拟合，容易进行多线程优化，控制模型复杂度，但效率较低</li><li>Modified Preorder Tree Taversal: 用于层级关系的存储和遍历, 解决邻接表递归查询低效问题，但不适用于增删改操作较多的场景<br>  <img src="https://zhuanlan.zhihu.com/p/91176792" alt="参考链接"><pre class="line-numbers language-sql"><code class="language-sql">      <span class="token comment" spellcheck="true"># 创建数据表</span>      <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">'product_category'</span> <span class="token punctuation">(</span>          <span class="token string">'id'</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>          category_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>          left_value <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>          right_value <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>          <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">      <span class="token comment" spellcheck="true"># 插入子分类</span>      <span class="token keyword">INSERT</span> <span class="token keyword">into</span> product_category<span class="token punctuation">(</span>category_name<span class="token punctuation">,</span> <span class="token string">'left_value'</span><span class="token punctuation">,</span> <span class="token string">'right_value'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 插入数据</span>      <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'food'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 锁表 防止被同时修改导致数据不一致</span>      <span class="token keyword">lock</span> <span class="token keyword">table</span> <span class="token string">'product_category'</span> <span class="token keyword">write</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 插入子分类</span>      <span class="token keyword">select</span> <span class="token variable">@myLeft</span> :<span class="token operator">=</span> <span class="token string">'left_value'</span>       <span class="token keyword">from</span> <span class="token string">'product_category'</span>      <span class="token keyword">where</span> category_name <span class="token operator">=</span> <span class="token string">'food'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 更新受影响分类左右区间值</span>      <span class="token keyword">update</span> product_category <span class="token keyword">SET</span> left_value<span class="token operator">=</span>left_value <span class="token operator">+</span><span class="token number">2</span> <span class="token keyword">where</span> left_value<span class="token operator">></span><span class="token variable">@myLeft</span><span class="token punctuation">;</span>      <span class="token keyword">update</span> product_category      <span class="token keyword">SET</span> right_value<span class="token operator">=</span>right_value <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">where</span> right_value<span class="token operator">></span><span class="token variable">@myLeft</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 插入子分类信息</span>      <span class="token keyword">INSERT</span> <span class="token keyword">into</span> product_category<span class="token punctuation">(</span>category_name<span class="token punctuation">,</span> <span class="token string">'left_value'</span><span class="token punctuation">,</span> <span class="token string">'right_value'</span><span class="token punctuation">)</span>      <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'meat'</span><span class="token punctuation">,</span> <span class="token variable">@myLeft</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">@myLeft</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 解除锁表</span>      unlock <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">      <span class="token comment" spellcheck="true"># 查询指定分类子分类</span>      <span class="token keyword">select</span> <span class="token variable">@myLeft</span> :<span class="token operator">=</span> <span class="token string">'left_value'</span><span class="token punctuation">,</span> <span class="token variable">@myRight</span> :<span class="token operator">=</span> <span class="token string">'right_value'</span>      <span class="token keyword">from</span> <span class="token string">'product_category'</span>      <span class="token keyword">where</span> <span class="token string">'category_name'</span><span class="token operator">=</span><span class="token string">'meat'</span><span class="token punctuation">;</span>      <span class="token keyword">select</span> <span class="token operator">*</span>       <span class="token keyword">from</span> <span class="token string">'product_caegory'</span>      <span class="token keyword">where</span> <span class="token string">'left_value'</span> <span class="token operator">>=</span> <span class="token variable">@myLeft</span> <span class="token operator">and</span> <span class="token string">'right_value'</span> <span class="token operator">&lt;=</span> <span class="token variable">@myRight</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>LightGBM: </p><ul><li>基于Histogram的决策树算法<ul><li>内存占用少，计算代价小</li><li>差加速: 叶子节点直方图由父节点和相邻节点作差得到，<strong>只使用非零特征构建直方图</strong></li></ul></li><li>Leaf_wise 增长策略<ul><li>在分裂次数相同的情况下，可以降低更多的误差</li><li>但可能会长出比较深的决策树，产生过拟合，需要增加最大深度限制，在保证高效率的同时防止过拟合    </li></ul></li><li>Gradient-based One-Side Sampling: 从减少样本的角度出发，排除大部分对计算信息增益没有帮助的小梯度样本</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Functions </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
