<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ML_Competition</title>
      <link href="/2022/09/28/ml-competition/"/>
      <url>/2022/09/28/ml-competition/</url>
      
        <content type="html"><![CDATA[<h2 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h2><ol><li><p>数据集基本情况：数据大小，字段类型；</p></li><li><p>重复值、缺失值、异常值：去除重复值，缺失值是否严重或有特殊含义，如何发现异常值；</p></li><li><p>特征之间是否冗余：特征之间相似性分析；</p></li><li><p>是否存在时间信息：当存在时间信息时，需要进行相关性、趋势性、周期性和异常点的分析，还有可能涉及潜在的数据穿越问题；</p></li><li><p>标签分布：</p><p> 分类问题：类别分布不均衡；</p><p> 回归问题：存在异常值，整体分布情况，是否需要进行目标转换</p></li><li><p>训练集和测试集的分布： 是否有很多只在测试集中存在的特殊字段</p></li><li><p>单变量/多变量分布：熟悉特征的分布情况以及标签和特征之间的关系</p></li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><pre class="line-numbers language-Python"><code class="language-Python">train['SalePrice'].describe()plt.figure(figsize=(9,8))sns.distplot(train['SalePrice'], color='g', bins=100, hist_kws={'alpha':0.4})## 相似性矩阵corrmat = train.corr()f, ax= plt.subplots(figsize=(20,9))sns.heatmap(corrmat, vmax=0.8, square=True)## 多变量分析plt.style.use('seaborn-white')type_cluster = train.group_by(['Neighborhood', 'OverallQual']).size()type_cluster.unstack().plot(kind='bar', stacked=True, colormap='Pubu', figsize=(13,11), grid=False)plt.xlable('OverallQual', fontsize=16)plt.show()## 特征关联性分析def feature_select_pearson(train, features):    featureSelect = features[:]    corr = []    for feat in featureSelect:        corr.append(abs(train[['feat', 'target']].fillna(0).corr().values[0][1]))    se = pd.Series(corr, index=featureSelect).sort_values(ascending=False)    feature_select = se[:300].index.tolist()    return train[feature_select]## 特征重要性分析 params = {'max_depth':10,'subsample':1,'verbose_eval':True,'seed':12,'objective':'binary:logistic'}xgtrain = xgb.DMatrix(x, label=y)bst = xgb.train(params, xgtrain, num_boost_round=10)## weight 指代被选为分裂特征的次数；gain 指代特征在所有树中作为分裂节点信息增益之和再除以该特征出现的频次；cover 指代特征被分到该节点的二阶导数之和importance = bst.get_score(fmap='', importance_type='weight')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ul><li>缺失值处理：<ol><li>类别特征：众数或者新类别；</li><li>数值特征：平均数、中位数、众数、最大最小值；</li><li>有序数据(时间序列)：填充相邻值next|previous</li></ol></li><li>异常值处理：<ol><li>删除含有异常值记录；</li><li>将异常值视为缺失值；</li></ol></li></ul><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><ul><li><p>损失函数：</p><p>  Lasso &amp;&amp; Ridge: 对传统L1/L2正则增加惩罚项</p></li><li><p>树模型：</p><ol><li><p>随机森林(Bagging)：</p><p> 基于非线性树的模型，通过集成学习的思想将多个决策树集成在一起投票得到最终结果</p><p> 并行特性，适合分布式训练，且不易过拟合</p><p> 有放回随机抽样训练决策树，随机选取属性做节点分裂属性(信息增益、信息增益比、基尼指数)，直至不能再分裂(节点的所有样本均属于同一类)</p><pre class="line-numbers language-Python"><code class="language-Python"> from sklearn.ensemble import RandomForestClassifier rf = RandomForestClassifier(max_fefatures='auto', oob_score=True, random_state=1, n_jobs=1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>梯度提升树(Boosting):</p><p> 串行学习一系列基学习器，每次生成一棵树，学习目标是上棵树的残差</p><p> 估计方差增加，对数据中的噪声敏感(可通过子采样减弱)，非并行操作计算成本显著</p></li><li><p>XGBoost:</p><p> 采用稀疏感知算法。利用稀疏矩阵节省内存(不需要密集矩阵)和计算时间(特殊方式处理零值)；</p><p> 加权分位数略图近似树学习节省分支切割探索时间(广度优先搜索BFS)；</p><p> 利用核外计算的优化算法解决磁盘读取数据时间过长问题(独立线程专门读取并行运行数据加载和计算)；</p><p> 有效处理缺失值，训练时对缺失值自动学习切分方向</p><pre class="line-numbers language-Python"><code class="language-Python"> import xgboost as xgb params = {'eta':0.01, 'max_depth':11, 'objective':'reg:linear', 'eval_metric': 'rmse'} dtrain = xgb.DMatrix(data=X_train, label=y_train) dtest = xgb.DMatrix(data=X_valid, label=y_valid) watchlist=[(train_data, 'train'), (valid_data, 'valid')] model= xgb.train(param,train_data, num_boost_round=20000, evals=watchlist, early_stopping_rounds=200, verbose=500) y_pred = model.predict(xgb.DMatrix(X_test), ntree_limit= model.best_ntree_limit)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>LightGBM:</p><p> 基于分布式，可以快速处理大量数据，在非常复杂的树中捕获训练数据的底层模式；</p><p> 专注于按叶子节点进行划分以便获得更好的拟合(深度优先搜索DFS);</p><pre class="line-numbers language-Python"><code class="language-Python"> import lightgbm as lgb params = {'num_leaves':54, 'objective':'regression', 'max_depth':18, 'learning_rate':0.01, 'boosting':'gbdt', 'metric':'rmse', 'lambda_l1':0.1} model = lgb.LGBMRegressor(**params, n_estimators=20000, nthread=4, n_jons=-1) model.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_valid, y_valid)], eval_metric='rmse',verbose=1000, early_stopping_rounds=200) y_pred = model.predict(X_test, num_iteration=model.best_iteration_)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CatBoost:</p><p> 支持类别特征，无需预处理类别特征，采用独热编码和均值编码混合的策略处理类别特征；</p><p> 提出全新梯度提升机制(Ordered Boosting)，减少过拟合风险，提升准确性；</p><p> 支持GPU训练(设置task_type=’GPU’)；</p><p> 训练中使用组合类别特征，利用特征之间的联系极大丰富了特征维度</p><pre class="line-numbers language-Python"><code class="language-Python"> from catboost import CatBoostRegressor params = {'learning_rate':0.02, 'depth':13, 'bootstrap_type':'Bernoulli', 'od_type':'Iter', 'od_wait': 50, 'random_seed': 11} model = CatBoostRegressor(iterations=20000, eval_metrix='RMSE', **params) model.fit(X_train, y_train, eval_set=(X_valid, y_valid), cat_features=[], use_best_model=True, verbose=False) y_pred = model.fit(X_test)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模型对比：</p><ol><li>XGBoost 使用Level-wise按层生长，可以同时分裂同一层叶子，从而进行多线程优化，不容易过拟合。但很多叶子节点的分裂增益较低会影响性能；LightGBM使用Leaf-wise分裂方式，每次都从当前叶子中选择增益最大的结点进行分裂。但会生成非常深的决策树导致过拟合；CatBoost使用oblivious-tree，节点镜像生长。这种树结构起到了正则化的作用不容易过拟合；</li><li>XGBoost和LightGBM都是有偏梯度估计，梯度估计和建立模型使用的数据是相同的，这样会导致数据泄漏产生过拟合；CatBoost通过利用所有的数据集(除第i条)构建模型$M_i$，并利用1到i-1条数据建造修正树累加到原有模型上；</li><li>XGBoost不能处理类别特征，需要搜互动根据数据实际情况进行独热编码、count编码和目标编码；LightGBM直接支持类别特征，不需要独热展开；CatBoost在处理类别特征时可以选择不进行多余的编码方式；</li><li></li></ol></li></ol></li></ul><h2 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h2><ol><li><p>减少内存占用：</p><p> 类别型变量可采用(有顺序关系)自然数编码(无顺序关系)独热编码，数值型变量采用归一化*100/1000取整</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> Competetion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Video_Enhance</title>
      <link href="/2022/09/26/video-enhance/"/>
      <url>/2022/09/26/video-enhance/</url>
      
        <content type="html"><![CDATA[<h1 id="Video-Enhance"><a href="#Video-Enhance" class="headerlink" title="Video Enhance"></a>Video Enhance</h1><ul><li><p>Faster Super-Resolution CNN:</p><p>  使用反卷积代替插值的预处理实现上采样，大大减少模型计算量；</p><p>  使用ResNet bottleneck 架构提高模型精度；</p><p>  使用更小的卷积和更多的卷积层来替代大的卷积核</p></li><li><p>Efficient Sub-Pixel CNN:</p><p>  只在模型末端使用亚像素卷积(将特征图通道数中连续的c个通道作为一个整体进行像素重排列，最终得到多通道的上采样图)的方式上采样，在低分辨率空间中保留更多的纹理区域，同时在视频超分中做到实时；</p></li></ul><h2 id="GAN"><a href="#GAN" class="headerlink" title="GAN:"></a>GAN:</h2><ul><li><p>CGAN:</p><p>  在生成网络的输入上将类别标签和噪声信号组成起来作为输入；</p><p>  在判别网络中将类别标签和图像数据拼接后作为输入；</p></li></ul><h2 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h2><ol><li>1*1 卷积核增加非线性</li><li>Dropout防止过拟合</li><li>K_Means 聚类后去Anchor比例</li><li>梯度消失(Gradient Vanishment): 传统神经网络采用Sigmoid作为激活函数，当层数较高时，Sigmoid函数在反向传播中的梯度值随着多次相乘逐渐减小，经过多层传递后会呈现指数级减小，发生梯度消失现象<br>。ReLU函数可以解决此现象</li></ol><h2 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object_Detection:"></a>Object_Detection:</h2><ul><li><p>Region CNN:</p><p>  首次将手动提取特征的方法更换为卷积神经网络，将经典目标检测算法中通过滑动窗口对所有可能区域的判断更换为提取一系列可能是物体的候选区域，并在候选区域上提取特征进行判断</p><p>  候选框大量重复，计算速度很慢，大量特征冗余，目标分类和定位回归的特征存储需要占用大量的内存</p></li><li><p>Selective Search:</p><p>  假设：物体存在的区域之间有相似性或连续性</p><p>  首先使用分割手段将图像分割成小区域并计算每两个相邻区域的相似度，合并可能性最高的两个区域(颜色直方图相近、梯度直方图相近、合并后总面积最小、在其边界框所占比例大优先合并)，依据生成顺序对每个图像块添加权重</p></li><li><p>Bounding Box Regression:</p><p>  对每一类目标使用一个线性回归器进行精修，候选框和真实边界框近似为线性关系。</p><p>  候选区域$P^i=(P_x^i, P_y^i, P_w^i, P_h^i)$，真实边界框$G=(G_x, G_y, G_w, g_h)$，线性变换的参数为$d_x(P), d_y(P), d_w(P), d_h(P)$<br>  $$\hat G_x=P_wd_x(P) + P_x$$<br>  $$\hat G_y=P_hd_y(P) + P_y$$<br>  $$\hat G_w=P_wexp(d_w(P))$$<br>  $$\hat G_h=P_hexp(d_h(P))$$<br>  假设任意一个线性变换的参数是特征$\phi(P)$的一个线性映射<br>  $$d_<em>(P)=w_</em>^T\phi(P)$$<br>  损失函数使用带L2范数的最小均方误差，$t_<em>^i$是优化问题的目标<br>  $$w_</em>=\argmin_{\hat w_<em>}\sum_i^N(t_</em>^i-\hat w_<em>^T\phi_5(P^i))^2+\lambda \hat w_</em>^2$$<br>  $$t_x=(G_x- P_x)/P_w$$<br>  $$t_y=(G_y- P_y)/P_h$$<br>  $$t_w=log(G_w/P_w)$$<br>  $$t_h=log(G_h/P_h)$$</p></li><li><p>Fast R-CNN:</p><p>  候选特征不需要重复计算；</p><p>  Region of Interest pooling 生成固定尺寸特征，代替R-CNN中的区域图像缩放；</p><p>  利用深度神经网络的全连接神经网络，设计分类和回归同步的多任务损失，同步完成整个算法的目标分类和定位回归任务</p></li><li><p>Faster R-CNN:</p><p>  设计以全卷积网络为基础的Region Proposal Network并与目标检测的卷积神经网络共享，将目标检测的四个基本步骤统一为一个端到端的神经网络，大大提高速度</p></li><li><p>Mask R-CNN:</p><p>  使用RoI Align代替RPN，双线性内插值解决区域不匹配问题</p><p>  在每一个RoI上的小全连接神经层加入一个应用，实现在像素级别上预测分割mask</p></li><li><p>Cascade R-CNN:</p><p>  在基于不同IOU阈值确定的正负样本上，通过训练R-CNN系列来检测网络级联。级联的结构是为了通过调整边界框给下一阶段找到一个IOU更好的正样本来训练</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basic </tag>
            
            <tag> Competetion </tag>
            
            <tag> Video_Enhance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Knowledge_Graph</title>
      <link href="/2022/09/22/knowledge-graph/"/>
      <url>/2022/09/22/knowledge-graph/</url>
      
        <content type="html"><![CDATA[<h1 id="KnowLedge-Graph"><a href="#KnowLedge-Graph" class="headerlink" title="KnowLedge_Graph"></a>KnowLedge_Graph</h1><ul><li><p>Main works:</p><ol><li><p>Named Entity Recognition:</p><p> 负责三元组(SPO)中主客体的边界与类别的识别工作</p></li><li><p>Relation Extraction:</p><p> 负责三元组中主客体之间关系类别的分类工作</p></li><li><p>Knowledge Fusion:</p><p> 对来自给定的多个不同知识图谱的三元组进行对齐</p><ul><li>无监督实体对齐: 通过对实体属性提取特征，并根据特征相似度进行聚类来实现对齐。<em>编辑距离、Jaccard系数、余弦相似度</em>衡量实体相似度</li><li>有监督实体对齐: 通过PairWise方法对来自不同知识图谱的实体进行两两配对，并利用人工标注标签来构建训练集</li></ul></li><li><p>Referential Resolution:</p><ul><li>Mention Pair: 与有监督实体对齐方法类似。通过实体识别得到句子中所有Mention词，再使用PairWise方法对Mention词两两配对，最终训练出二分类分类器表示Mention词是否指代同一事物。进行预测时需要通过共指传递性进行补全<br>$$Loss=-\sum_{ij}y_{ij}logP(m_i,m_j)$$<br>正例$y_{ij}=1$,负例$y_{ij}=-1$</li><li>Mention Ranking:通过对某个Mention词只预测一个相关Mention的方式来减少错误传递，提高预测准确率<br>$$Loss=-\sum_i\sum_jy_{ij}logP(m_i,m_j)$$<br>正例$y_{ij}=1$,负例$y_{ij}=0$</li></ul></li></ol></li></ul><h2 id="知识推理：知识图谱的补全和质量校验"><a href="#知识推理：知识图谱的补全和质量校验" class="headerlink" title="知识推理：知识图谱的补全和质量校验"></a>知识推理：知识图谱的补全和质量校验</h2><ol><li><p>基于符号逻辑的推理</p><p> 符号逻辑推理主要是基于描述逻辑的本体推理。描述逻辑是一种基于对象的知识形式化表达，具有很强的表达能力与可判定性。包含概念与关系、Tbox公理集、Abox断言集、推理机制</p></li><li><p>基于表示学习的推理<br> 通过将学习的对象自动地由机器表示为隐式特征来获取更强的表达能力。</p><ul><li><p>Translating Embedding:</p><p>  将实体与关系映射为同样维度的向量，通过随机替换头尾实体得到负样本。只能处理一对一的关系<br>  $$Loss = \sum max(0, \gamma+d_{pos}(h+r,t)- d_{neg}(h’+r’, t’))$$</p></li><li><p>Random Walk:</p><p>  尝试对图中节点进行表示学习的方法: 给定图中节点，从其邻居中随机采样作为下一个访问节点，直到序列长度符合预设条件</p></li><li><p>Graph Neural Network:</p><p>  针对图结构的表示学习方法，主要通过图卷积对目标周围邻居节点所携带的信息进行聚合<br>  $$x_i^k=\gamma^k(x_i^{k-1}, AGG(\phi^k(x_i^{k-1}, x_j^{k-1}, e_{ij})))$$<br>  其中AGG为聚合方法(SUM|MEAN),$\gamma$和$\phi$是两个需要学习的层</p></li></ul></li></ol><h2 id="神经语言模型"><a href="#神经语言模型" class="headerlink" title="神经语言模型"></a>神经语言模型</h2><ul><li><p>Skip-Gram模型: 通过中心词预测上下文窗口的词。</p><p>  计算中心词和上下文窗口词的损失，反向传播回对应的词向量，从而进行词向量的学习与更新</p></li><li><p>CBOW模型: 通过上下文的全部词预测中心词</p></li></ul><h2 id="自然语言处理深度学习基本结构"><a href="#自然语言处理深度学习基本结构" class="headerlink" title="自然语言处理深度学习基本结构"></a>自然语言处理深度学习基本结构</h2><ul><li><p>CNN1D: </p><p>  首先训练出每个单词的词向量，然后将处理为单词索引的句子作为输入，在经过Embedding层转换为对应的特征张量(bs, len, dim),提供给卷积CNN1D层，最后CNN1D层通过在句子长度方向上滑动卷积核来计算特征张量(bs, len, 1)。使用k种卷积核并对其分别进行最大池化再拼接得到池化张量，最终通过MLP和softmax层得到类别概率。</p></li><li><p>Recurrent Neural Network:</p><p>  循环神经网络对序列的每一个位置进行同样的循环单元计算，每一个循环单元除了要接受该位置的信息，还要接受上一个循环单元的输出作为输入，保持了长距离的上下文信息。<em>在训练过程中由于反向传播算法，梯度会在不同的时刻以乘法的形式进行积累，最终导致梯度爆炸或消失的问题</em></p></li><li><p>Long Short Term Memory:</p><p>  在RNN基础上增加Cell state来直接传递相邻时刻之间的信息，缓解了梯度消失的问题。同时引入采用Sigmoid激活的门控机制(遗忘门、输入门与输出门)，来分别控制上一时刻的细胞状态、输入信息及输出信息的进一步传递，从而实现信息的长短期记忆</p></li><li><p>Gated Recurrent Unit:</p><p>  对LSTM进行简化，将细胞状态和隐藏状态合并，经遗忘门和输入门合二为一，降低计算复杂度。由于门控单元使信息经过多次Sigmoid激活，减小了梯度爆炸的可能性，实际操作中可采用梯度裁剪进一步避免梯度爆炸。</p></li><li><p>Attention Mechannical:</p><p>  将编码器的全部隐藏状态与当前时刻输入解码器的词向量做矩阵乘法，并进行Softmax归一化得到注意力权重，再与编码器的全部隐藏状态相乘的得到上下文向量。将该向量与输入的词向量进行拼接传入解码器中进行训练</p></li><li><p>Hidden Markov Model:</p><ul><li>观测独立性假设：任意时刻的观测只依赖于该时刻的状态；</li><li>一阶马尔可夫假设：任意时刻的状态只依赖于前一时刻的状态；<br>生成式有向图模型，由Viterbi算法解码求解概率模型。但受一阶马尔可夫假设限制，表达能力有限<br>$$P(X,Y)=P(y_0)\prod_{t=1}^nP(y_t|y_{t-1})P(x_t|y_t)$$<br>Viterbi: 对于给定的观测序列，寻找概率最大的隐藏状态序列，即在有向无环图中寻找一条最大路径<br>$$D_{t,j}=max(D_{t,j}, D_{t-1,k} + \theta_{kj})$$</li></ul></li><li><p>Maximum ENtropy Markov Models:</p><p>  判别式有向图模型，由于归一化参数是在累乘内部，局部归一化，每次状态转移都会倾向于选择拥有更少转移的状态,产生标注偏置问题。<br>  $$P(Y|X)=\prod_t P(y_t|y_{t-1}, x_t)$$<br>  $$P(y_t|y_{t-1}, x_t)=\frac{1}{Z}e^{\sum\lambda f(x,y)}$$</p></li><li><p>Conditional Random Filed:</p><p>  判别式无向图模型，全局归一化函数<br>  $$P(Y|X)=\frac{1}{Z}\prod_c\phi_c(y_c|x)$$<br>  $$\phi_c(y_c|x)=e^{\sum_k\lambda_kf_k(y_t,y_{t-1},x_t) + \mu_ks_k(y_t,x_t)}$$<br>  $$Z = \sum_y\prod_c\phi_c(y_c|x)$$</p></li><li><p>Bidirectional LSTM:</p><p>  利用前向循环网络和反向循环网络得到的输出按一定方式叠加，可以在任意时刻获得前后时刻的信息，自动构建输入数据特征与双向表达，比单向循环网络有更强的表达能力，但是预测的前后两个特征是相互独立的，出现如连续的<strong>Begin标签</strong>，可通过替换softmax为CRF,充分学习到标注之间信息。</p></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo:"></a>Demo:</h2><pre class="line-numbers language-Python"><code class="language-Python">import jieba# 词性特征word_flags = []for text in texts:    for word, flag in jieba.posseg.cut(text):        word_flags += [flag] * len(word)# 词边界特征word_flags = []word_bounds = ['I' for s in texts for x in s]for text in texts:    for word, flag in jieba.posseg.cut(text):        if len(word)==1:            start = len(word_flags)            word_bounds[start] = 'S'            word_flags.append(flag)        else:            start = len(word_flags)            word_bounds[start] = 'B'            word_flags += [flag] * len(word)            end = len(word_flags) - 1            word_bounds[end] = 'E'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Relation-Extraction"><a href="#Relation-Extraction" class="headerlink" title="Relation Extraction:"></a>Relation Extraction:</h2><ul><li><p>基于依存句法的抽取：</p><p>  依存句法分析描述了单词之间的丰富的修饰关系，借助于修饰关系可以制定一些通用的规则，避免对每个关系逐一构建规则模板。</p></li><li><p>Multiple Instance Learning:</p><p>  多示例学习的基本单位为Bag,一个Bag中有多个Instance。</p><p>  Piecewise Convolutional Neural Network + Attention Implementation: 对Bag中的每个句子x,使用基本的PCNN模型计算得到(3k,1)的池化张量。由于包中共享一组实体对，首先计算实体对特征张量(dim,1)，然后将池化张量与实体对特征张量分别输入Attention层，通过注意力机制计算上下文权重，并利用该权重与包中所有句子的池化张量来计算包特征，再经过MLP层与Softmax层，最终输出包类别概率。</p></li></ul><h2 id="Feature-Project"><a href="#Feature-Project" class="headerlink" title="Feature Project:"></a>Feature Project:</h2><pre class="line-numbers language-Python"><code class="language-Python"># Instance distanceouter_len = max(e1['end'] - e2['end'])-  min(e1['start'], e2['start'])inner_len = max(e1['start'], e2['start']) - min(e1['end'], e2['end'])# Instance speechtext = []flags = []for w, flag in jieba.posseg.cut(sent):    text.append(w)    flags.append(flag)# Instance position hintseg = np.zeros(len(text))seg[e1b:e1e] += 0.1seg[e2b:e2e] -= 0.1# Instance relative positiondef cal_pos(begin, end, l):    if begin<0:        begin += 1        end += 1    median = (begin + end) /2    return np.arange(l) - mediane1pos = cal_pos(e1b, e1e, len(text))e2pos = cal_pos(e2b,e2e, len(text))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES:"></a>NOTES:</h2><ol><li>信息标注格式化解析<pre class="line-numbers language-Python"><code class="language-Python">label_r = label[label[0].str.startswith('R')]label_r.columns = ['id', 'relation']label_r['catagory'] = [r.split()[0] for r in label_r['relation'].tolist()]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>多线程并行处理<pre class="line-numbers language-Python"><code class="language-Python">def process_text(idx, target_dir='train', split_method=None): # process *.txt文件和对应的*.ann文件import multiprocessing as mpnum_worker = mp.cpu_count()pool = mp.Pool(num_worker)results = []# 获取文件idids = set([x.split('.')[0] for x in os.listdir('../data/train/')])for idx in ids: result = pool.apply_async(process_text, args=(idx, 'train', split_method)) reuslts.append(result)pool.close()pool.join()[r.get() for r in tqdm(results)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>远程监督<pre class="line-numbers language-Python"><code class="language-Python"># 关系列表relation = set([ 'Test_Disease', 'Symptom_Disease'])# 遍历全部关系datasets = []for r in tqdm(relation): c1, c2= r.split('_') e1_data = label_T[label_T['category']==c1] e2_data = label_T[label_T['category']==c2] # 实例两两组成三元组 for i, e1 in e1_data.iterrows():     for j, e2 in e2_data.iterrows():         begin = min(e1['start'], e2['start'])         end = max(e1['end'], e2['end'])         # 负样本筛选         if end - begin > max_len:             continue         sentence = clean(texts[begin:end])         datasets.append([e1['id'], e2['id'],e1['category'] + '_' + e2['category'], -1, sentence])label_R = set((r['arg1'], r['arg2']) for r in label_R)for i in range(len(datasets)): if tuple(datasets[i][:2]) in label_R:     datasets[i][3] = 1 else:     datasets[i][3] = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>句子窗口：<pre class="line-numbers language-Python"><code class="language-Python">if end - begin <=100: window = 50elif end - begin <= 140: window = 30else: window = 0num_pad = max_len - (end-begin)left_w = min(num_pad //2 , window)right_w = min(num_pad - left_w, window)begin = max(0, begin - left_w)end = min(len(text), end + right_w)sentence = clean(text[begin:end])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basic </tag>
            
            <tag> Knowledge_graph </tag>
            
            <tag> Competetion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bayes_basic</title>
      <link href="/2022/09/21/bayes-basic/"/>
      <url>/2022/09/21/bayes-basic/</url>
      
        <content type="html"><![CDATA[<h2 id="参数化建模学习：概念和方向"><a href="#参数化建模学习：概念和方向" class="headerlink" title="参数化建模学习：概念和方向"></a>参数化建模学习：概念和方向</h2><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><ol><li>一个无约束的最小化问题总是会导致损失函数小于或等于有约束的对应情形；</li><li>通过在最小方差无偏(Minimum Variance Unbiased)估计量中引入偏差缩小范数，可以获得比MVU更好的结果；</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HDFS</title>
      <link href="/2022/09/17/hdfs/"/>
      <url>/2022/09/17/hdfs/</url>
      
        <content type="html"><![CDATA[<h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><ul><li><p>Advantages:</p><ol><li>超大文件(TB,PB级)，主要处理搞数据吞吐量的应用;</li><li>支持流式数据访问。一次写入，多次读取;</li><li>低成本运行;</li></ol></li><li><p>Disadvantages:</p><ol><li>不适合处理低延时的数据访问；</li><li>不适合处理大量小文件。过多的小文件会消耗NameNode的内存；</li><li>不适合多用户写入及任意修改文件；</li></ol></li><li><p>Components &amp; Arch</p><ol><li><p>NameNode:</p><p> 负责管理和维护HDFS的NameSpace,维护操作日志文件edits和命名空间镜像文件fsimage；</p><pre><code> fsimage包含Hadoop文件系统中所有目录和文件的序列化信息;edits记录NameNode启动后对HDFS进行的各种更新操作</code></pre><p> 管理DataNode的Block，维持副本数量;</p><pre><code> 文件-&gt;数据块、数据块-&gt;DataNode映射列表</code></pre></li></ol></li></ul><pre><code>    接收客户端请求(上传、下载,等)2. DataNode:    数据块大小: 磁盘进行读、写最小单位。大数据块会减少寻址开销，减少磁盘一次读取时间。    数据节点存储数据块ID和内容，以及之间的映射关系。但一个数据块在一个DataNode上最多只有一个备份    DataNode和NameNode定时通信，接收NameNode的指令，通过启动时上报的方式更新NameNode上的映射表。3. SecondaryNameNode:    与NameNode运行在不同的机器上，内存一样大；    Checkpoint: 定期将NameNode的fsimage和edits下载到本地，并将它们加载到内存进行合并，最终将合并后的新的fsimage上传回NameNode；</code></pre><ul><li><p>Mechanical:</p><ol><li><p>rack-aware:</p><p> 通过外在脚本实现机架感知</p></li><li><p>副本冗余存储:</p><p> 提供容错机制，副本丢失或宕机时自动修复。副本一放置在上传文件的数据节点，副本二放置在与副本一不同的机架节点上，副本三放置在与副本二相同机架上的其他节点上。</p><p> 减少了机架间数据传输，提高写操作的效率及读取数据时需要的网络传输总带宽。</p></li><li><p>HDFS Shell operators:</p><pre class="line-numbers language-Shell"><code class="language-Shell">     hdfs dfs -mkdir [-p] <path>     # -h 人性化显示 -R级联显示     hdfs dfs -ls [-d][-h][-R] <path>     # 新建文件     hdfs dfs -touchz <path>     # 上传文件     hdfs dfs -put [-f][-p] <localsrc> <dst>     hdfs dfs -copyFromLocal [-f][-p][-l] <localsrc> <dst>     hdfs dfs -moveFromLocal <localsrc> <dst>     # 下载文件     hdfs dfs -get [-p] <src> <localdst>     hdfs dfs -copyToLocal [-p] [-ignoreCrc] [-crc] <src> <localdst>     # 查看文件 -ignoreCrc: 忽略循环检验失败的文件 -f: 动态更新显示数据     hdfs dfs -cat/text[-ignoreCrc] <src>     hdfs dfs -tail [-f] <file>     # 追写文件     hdfs dfs -appendToFile <localsrc> <dst>     hdfs dfs -rm [-f] [-r] <src>     # 显示占用的磁盘空间大小 -s: 显示指定目录下文件总大小     hdfs dfs -du [-s] [-h] <path>     # 复制文件 -f: 强行覆盖 -p: 保留文件属性     hdfs dfs -cp [-f] [-p|-p[topax]] <src> <dst>     # 文件合并后下载     hdfs dfs -getmerge [-nl] <src> <localdst>     # 统计目录下子文件及文件大小     hdfs dfs -count [-q] [-h] <path>     # 报告文件系统的信息     hdfs dfsadmin -report     hdfs dfsadmin -printTopology<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HDFS Java API</p><pre class="line-numbers language-Java"><code class="language-Java">     // 实例化Configuration&FileSystem类     Configuration conf= new Configuration();     FileSystem fs= FileSystem.get(uri, conf, "username");     // 设置目标对象路径     Path path= new Path("/test");     // 执行文件或目录操作     package org.apache.hadoop.examples;     import java.io.FileInputSystem;     import java.io.InputStream;     import java.io.OutputStream;     import java.net.URI;     import org.apache.hadoop.conf.Configuration;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><pre><code>    ```</code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV_Knowledge</title>
      <link href="/2022/09/14/cv-knowledge/"/>
      <url>/2022/09/14/cv-knowledge/</url>
      
        <content type="html"><![CDATA[<h2 id="VAE"><a href="#VAE" class="headerlink" title="VAE"></a><font color="blue"><strong>VAE</strong></font></h2><ul><li>INPUT: sample X</li><li>DISTRIBUTION: p(X)</li><li>HIDDEN VARIABLE: $Z:N(Mean, \delta^2)$<br>$$ p(X)=\sum_Z p(X|Z)p(Z) $$</li></ul>]]></content>
      
      
      <categories>
          
          <category> STUDY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
            <tag> BASIC_KNOWLEDGE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>optimal_algorithms</title>
      <link href="/2022/09/13/optimal-algorithms/"/>
      <url>/2022/09/13/optimal-algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="PSO-Particle-Swarm-Optimization"><a href="#PSO-Particle-Swarm-Optimization" class="headerlink" title="PSO(Particle Swarm Optimization)"></a><font color="blue"><strong>PSO(Particle Swarm Optimization)</strong></font></h1><ul><li><p>Features:</p><ol><li>search global solution by iteration as anneal simulation</li></ol></li><li><p>PSO Standard format<br>$$ v_i = v_i + c_1 <em>rand() </em> (pbest_i - x_i) + c_2 <em> rand() </em> (gbest_i - x_i)     $$<br>$$ x_i = x_i + v_i $$<br>$$ v_i = w<em>v_i + c_1</em>rand()<em>(pbest_i-x_i)+c_2</em>rand()*(gbest_i-x_i)    $$<br>动态w可在PSO搜索过程中线性变化，w越大，全局寻优能力强；越小，局部寻优能力强。</p></li><li><p>LDW(Linearly Decreasing Weight)<br>$$ w^{(t)}=(w_{ini} - w_{end})*(G_k-g) / G_k +w_{end}   $$<br>其中$G_k$为最大迭代次数，$w_{ini}$为初始惯性权值，$w_{end}$为迭代至最大进化代数式的惯性权值</p></li><li><p>PSO Standard Flow</p><ol><li>初始化一群微粒(N);</li><li>评价每个微粒的适应度;</li><li>对每个微粒，将其适应值与经过的最好位置pbest作比较;</li><li>对每个微粒，将其适应值与其经过的最好位置gbest作比较;</li><li>根据公式调整微粒速度和位置；</li></ol></li></ul><h1 id="SA-Simulate-Annealing"><a href="#SA-Simulate-Annealing" class="headerlink" title="SA(Simulate Annealing)"></a><font color="blue"><strong>SA(Simulate Annealing)</strong></font></h1><pre class="line-numbers language-PYTHON"><code class="language-PYTHON">from numpy import asarrayfrom numpy import expfrom numpy.random import randnfrom numpy.random import randfrom numpy.random import seedfrom matplotlib import pyplot as pltdef objective(x):    return x[0]**2.0def simulated_annealing(objective, bounds, n_iterations, step_size, temp):    # generate an initial point    best = bounds[:, 0] + randn(len(bounds)) * (bounds[:, 1] - bounds[:, 0])    # evaluate the initial point    best_eval = objective(best)    # current working solution    curr, curr_eval = best, best_eval    scores = list()    for i in range(n_iterations):        # take a step        candidate = curr + randn(len(bounds)) * step_size        # evaluate candidate point        candidate_eval = objective(candidate)        # check for new best solution        if candidate_eval < best_eval:            best, best_eval = candidate, candidate_eval            scores.append(best_eval)            print('>%d f(%s)=%.5f' % (i, best, best_eval))        diff = candidate_eval - curr_eval        # calculate temperature for each epoch        t = temp / float(i +1)        # calculate metropolis acceptance criterion        metropolis = exp(-diff / t)        if diff <0 or rand() < metropolis:            curr, curr_eval = candidate, candidate_eval    return [best, best_eval, scores]seed(1)# define range for inputbounds = asarray([[-5.0, 5.0]])n_iterations = 100step_size = 0.1temp = 10best, score, scores = simulated_annealing(objective, bounds, n_iterations, step_size, temp)print("done!")print("f(%s)=%f" % (best, score))plt.plot(scores, ',-')plt.xlabel('Improvement Number')plt.ylabel('Evaluation f(x)')plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multiprocessing</title>
      <link href="/2022/09/13/multiprocessing/"/>
      <url>/2022/09/13/multiprocessing/</url>
      
        <content type="html"><![CDATA[<h2 id="DistributedDataParallel"><a href="#DistributedDataParallel" class="headerlink" title="DistributedDataParallel"></a>DistributedDataParallel</h2><pre class="line-numbers language-PYTHON"><code class="language-PYTHON">    import torch    import torch.distributed as dist    import torch.multiprocessing as mp    def parse_args():        # Code Block        return args    def main():        args = parse_args()        args.nprocs = torch.cuda.device_count()        mp.spawn(main_worker, nprocs=args.nprocs, args=(args.nprocs, args))    def main_worker(local_rank, nprocs, args):        args.local_rank = local_rank        if args.seed is not None:            random.seed(args.seed)            torch.manual_seed(aegs.seed)            cudnn.deterministic = True        dist.init_process_group(backend='nccl',                                init_method='tcp://127.0.0.1:23456',                                world_size=args.nprocs,                                rank=local_rank)        # create model        torch.cuda.set_device(local_rank)        model.cuda(local_rank)        model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank])        criterion = nn.CrossEntropyLoss().cuda(local_rank)        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)        train_loader = torch.utils.data.DataLoader(train_dataset,                                                    batch_size=args.batch_size,                                                    num_workers=2,                                                    pin_memory=True,                                                    sampler=train_sampler)        for epoch in range(args.start_epoch, args.epoch):            train_sampler.set_epoch(epoch)            adjust_learning_rate(optimizer, epoch, args)            train(train_loader, model, criterion, optimizer, epoch, local_rank, args)            if args.local_rank == 0:                save_checkpoint({                    'epoch':epoch+1,                    'arch':args.arch,                    'state_dict':model.module.state_dict(),                }, is_best)    def train(*args, **kwargs):        model.train()        for i, (images, target) in enumerate(train_loader):            images = images.cuda(local_rank, non_blocking=True)            # when func is not the main_process(rank!=0,-1), context_manegementor will barrier processor util all processors reach barrier            torch.distributed.barrier()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://github.com/tczhangchi/pytorch-distributed/" target="_blank" rel="noopener">reference</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MultiProcessing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++_Basic</title>
      <link href="/2022/08/25/c-basic/"/>
      <url>/2022/08/25/c-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p>##<br>definition = declaration + initialisation</p><pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>using namespace std:int main(){    char a123 = 'a':    cout << a123 << endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Basic-knowledge"><a href="#Basic-knowledge" class="headerlink" title="Basic_knowledge"></a>Basic_knowledge</h3><ol><li><p><strong>Static Variables</strong> are similarly declared as <strong>Instance Variables</strong>, but using the <em>static keyword</em> within a class outside any method constructor or block</p><ul><li>Changes maded in an <strong>instance variable</strong> using one object will <strong>not reflected</strong> in other objects, while in an <strong>instance variable</strong> things are different.</li><li><strong>Instance variables</strong> can be accessed by <strong>object references</strong>, while <strong>static variables</strong> via <strong>class name</strong></li><li>Each object have its <strong>own copy</strong> of <strong>instance variable</strong> whereas we can only have <strong>one copy</strong> of a <strong>static variable</strong> per class.</li></ul></li><li><p>Loops:</p><ul><li>for</li><li>while</li><li>do while<pre class="line-numbers language-C++"><code class="language-C++">      do      {          //statement      } while (test_expression);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>If-else: the variables created in C/C++ will be local to that block only.</p><pre class="line-numbers language-C++"><code class="language-C++"> #include <iostream> using namespace std; void printNumbers() {     int n = 1; label:     cout << n << " ";     n++;     if (n <= 10)         goto label; } int main() {     printNumbers();     return 0; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Redirect IO: istream ostream iostream<br><code>freopen (&quot;text_file.txt&quot;, &quot;w&quot;, stdout)</code></p><pre class="line-numbers language-C++"><code class="language-C++">#include <fstream>#include <iostream>#include <string><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>using namespace std;</p><p>int main()<br>{<br>    fstream file;<br>    file.open(“cout.txt”, ios::out);<br>    string line;</p><pre><code>// backup streambuffersstreambuf* stream_buffer_cout = cout.rdbuf();streambuf* stream_buffer_cin = cin.rdbuf();// get streambuffer of filestreambuf* stream_buffer_file = file.rdbuf();// redirect cout to filecout.rdbuf(stream_buffer_file);cout &lt;&lt; &quot;This line written to file&quot; &lt;&lt; endl;// redirect cout back to screencout.rdbuf(stream_buffer_cout);cout &lt;&lt; &quot;This line is written to screen&quot; &lt;&lt; endl;file.close();return 0;</code></pre><pre><code>Also the above can be condensed as follows:```C++auto cont_buf = cout.rdbuf(file.rdbuf())// sets couts streambuffer and returns the oldstreambuffer back to cont_buf</code></pre><ul><li>Standard IO format<pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>using namespace std;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>int main()<br>{<br>    int age;</p><pre><code>cout &lt;&lt; &quot;Enter your age:&quot;;cin &gt;&gt; age;cout &lt;&lt; &quot;\n Your age is: &quot; &lt;&lt; age;return 0;</code></pre><p>}</p><pre><code>*cerr* is un-buffered standard error stream which doesn&#39;t get stored in file.*clog* is different from *cerr* as it stores the erroe in the buffer.+ Clear input buffer```C#include&lt;stdio.h&gt;int main(){    char str[80], ch;    // scan input from user    scanf(&quot;%s&quot;, str);    // flushes the standard input &amp; clears the input buffer    while ((getchar()) != &#39;\n&#39;);    // scan character from user    ch = getchar();    printf(&quot;%s\n&quot;, str);    printf(&quot;%c&quot;, ch);    return 0;}</code></pre><pre class="line-numbers language-C++"><code class="language-C++">#include<iostream>#include<ios>#include<limits>using namespace std;int main(){    int a;    char str[80];    cin >> a;    // type 1    cin.ignore(numeric_limits<streamsize>::max(), '\n');    // type 2: discards the input buffer and initial white spaces of string    cin >> ws    cin.getline(str, 80);    cout << a << endl;    cout << str << endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Operators</p><table><thead><tr><th align="left">operator</th><th align="left">function</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">bitwise AND</td></tr></tbody></table></li><li><p>Dynamic memory: remain until being deallocated by program</p><pre class="line-numbers language-C"><code class="language-C">malloc()calloc()free()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++"><code class="language-C++">int *p = new(nothrow) int;if (!p)  cout << "allocation of memory failed\n";delete p;// release block memory pointed by point-variabledelete[] p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Arrays</p><pre class="line-numbers language-C++"><code class="language-C++">// array declaration by specifying the sizeint arr1[10];int n = 10;int arr2[n];// array declaration by initializing elementsint arr[] = {10, 20, 30, 40};// array declaration by specifying the size and initializing elementsint arr[6] = {10, 20, 30, 40};// dynamic allocationint** x = new int*[3];for (int i=0;i<3;i++){  x[i] = new int[4];  for (int j=0;j<4;j++)  {      cin >> x[i][j];  }}// use template and reference to find size of any type arraytemplate <typename T, size_t, n>void findSize(T (&arr)[n]){  cout << sizeof(T) * n << endl;}int main(){  int a[10];  cout << sizeof(a) << " ";  findSize(a);  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>String</p></li></ul><p><em>push_back(str)</em>: input a character at the end of the string<br><em>pop_back(str)</em>: delete the last character from the string</p><pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>#include <string>using namespace std;int main(){    string str = "helloword";    std::string::iterator it;    std::string::reverse_iterator it1;    cout<< "The string using forward iterators is : ";    for (it=str.begin();it!=str.end();it++)        cout<< *it;    cout << endl;    cout<< "The reverse string using reverse iterators is ":" ";    for (it1=str.rbegin();it1!=str.rend();it1++)        cout <<*it1;    cout<<endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Array<pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>#include <stdio.h>int main(){  const char* colour[4] = {"Blue", "Red","Orange","Yellow"};  for(int i=0;i<4;i++)      std::cout << colour[i]<< "\n";  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Search-amp-Insert"><a href="#Search-amp-Insert" class="headerlink" title="Search &amp; Insert"></a>Search &amp; Insert</h3><pre class="line-numbers language-C++"><code class="language-C++">#include <bits/stdc++.h>using namespace std;const int ALPHABET_SIZE = 26;// trie nodestruct TrieNode{    struct TrieNode *children[ALPHABET_SIZE];    bool isEndOfWord;};// returns new trie nodestruct TrieNode *getNode(void){    struct TrieNode *pNode = new TrieNode;    pNode->isEndOfWord = false;    for(int i=0; i<ALPHABET_SIZE; i++)        pNode->children[i] = Null;    return pNode;}// search && insertvoid insert(struct TrieNode *root, string key){    struct TrieNode *pCrawl = root;    for(int i=0;i<key.length();i++)    {        int index = key[i] - 'a';        if (!pCrawl->children[index])            pCrawl->children[index] = getNode();        pCrawl = pCrawl->children[index];    }    // mark last node as leaf    pCrawl->isEndOfWord = true;}// generate resultbool search(struct TrieNode *root, string key){    struct TrieNode *pCrawl = root;    for(int i=0;i<key.length();i++)    {        int index = key[i] - 'a';        if(!pCrawl->children[index])            return false;        pCrawl = pCrawl->children[index];    }    return (pCrawl->isEndOfWord);}// driverint main(){    // input keys    string keys[] = {"the", "a", "there", "answer", "any", "by", "bye", "their"};    int n = sizeof(keys)/sizeof(keys[0]);    struct TrieNode *root = getNode();    // construct trie    for(int i=0;i<n;i++)        insert(root, keys[i]);    // search    search(root, "the")? cout << "Yes\n" : cout << "No\n";    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Binary-Indexed-Tree"><a href="#Binary-Indexed-Tree" class="headerlink" title="Binary Indexed Tree"></a>Binary Indexed Tree</h3><pre class="line-numbers language-C++"><code class="language-C++">#include <iostream>using namespace std;int getSum(int BITree[], int index){    int sum = 0;    index = index + 1;    while (index>0)    {        sum += BITree[index];        index -= index & (-index);    }    return sum;}void updateBIT(int BITree[], int n, int index, int val){    index = index + 1;    while (index<=n)    {        BITree[index] += val;        index += index & (-index);    }}int *constructBITree(int arr[], int n){    int *BITree = new int[n+1];    for (int i=1;i<=n;i++)        BITree[i] = 0;    for (int i=0;i<n;i++)        updateBIT(BITree, n, i, arr[i]);    return BITree;}int main(){    int freq[] = {2, 1, 1, 3, 2, 3, 4, 5, 6, 7, 8, 9};    int n = sizeof(freq)/sizeof(freq[0]);    int *BITree = constructBITree(freq, n);    cout << "Sum of elements in arr[0..5] is " << getSum(BITree, 5);    freq[3] += 6;    updateBIT(BITree, n, 3, 6);    cout << "Sum of elements in arr[0..5] is " << getSum(BITree, 5);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Segment-tree"><a href="#Segment-tree" class="headerlink" title="Segment tree"></a>Segment tree</h3><p>```C++</p><p>#include &lt;bits/stdc++.h&gt;<br>using namespace std;</p><p>int minVal(int x, int y)<br>{<br>    return (x &lt; y)? x: y;<br>}</p><p>int getMid(int s, int e)<br>{<br>    return s + (e - s) / 2;<br>}<br>// st: pointer to segment tree;<br>// index: index of current node;<br>// ss &amp; se: index of segment represented by current node;<br>// qs &amp; qe: index of query range;<br>int RMQUtil(int *st, int ss, int se, int qs, int qe, int index)<br>{<br>    if (qs &lt;= ss &amp;&amp; qe &gt;= se)<br>        return st[index];</p><pre><code>if (se &lt; qs || ss &gt; qe)    return InT_MAX;int mid = getMid(ss, se);return minVal(RMQUtil(st, ss, mid, qs, qe, 2 * index + 1), RMQUtil(st, mid+1, se, qs, qe, 2 * index + 2));</code></pre><p>}</p><p>int RMQ(int *st, int n, int qs, int qe)<br>{<br>    if (qs &lt; 0 || qe &gt; n-1 || qs &gt; qe)<br>    {<br>        cout &lt;&lt; “Invalid Input”;<br>        return -1;<br>    }<br>    return RMQUtil(st, 0, n-1, qs, qe, 0);<br>}</p><p>int constructSTUtil(int arr[], int ss, int se, int <em>st, int si)<br>{<br>    if (ss == se)<br>    {<br>        st[si] = arr[ss];<br>        return arr[ss];<br>    }<br>    int mid = getMid(ss, se);<br>    st[si] = minVal(constructSTUtil(arr, ss, mid, st, si </em> 2 + 1), constructSTUtil(arr, mid + 1, se, st, si * 2 + 2));<br>    return st[si];<br>}</p><p>inr <em>constructST(int arr[], int n)<br>{<br>    int x = (int)(ceil(log2(n)));<br>    int max_size = 2 </em> (int)pow(2, x) -1;<br>    int *st = new int[max_size];<br>    constructSTUtil(arr, 0, n-1, st, 0);<br>    return st;<br>}</p><p>int main()<br>{<br>    int arr[] = {1, 3, 2, 7, 9, 11};<br>    int n = sizeof(arr)/sizeof(arr[0]);<br>    int *st = constructST(arr, n);<br>    int qs = 1;<br>    int qe = 5;<br>    cout &lt;&lt; “Minimum of values in range [“ &lt;&lt; qs &lt;&lt; “, “ &lt;&lt; qe &lt;&lt; “] “ &lt;&lt; “is =” &lt;&lt; RMQ(st, n, qs, qe) &lt;&lt; endl;</p><pre><code>return 0;</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> Teconology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS_basic</title>
      <link href="/2022/08/23/css-basic/"/>
      <url>/2022/08/23/css-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h2><table><thead><tr><th align="left">selector</th><th align="left">example</th><th align="left">description</th></tr></thead><tbody><tr><td align="left">.class</td><td align="left">.into</td><td align="left">select all class=”intro” elements</td></tr><tr><td align="left">#id</td><td align="left">#firstname</td><td align="left">select all id=”firstname” elements</td></tr><tr><td align="left">*</td><td align="left">*</td><td align="left">select all elements</td></tr><tr><td align="left">element, element</td><td align="left">div, p</td><td align="left">select all div &amp; p elements</td></tr><tr><td align="left">element element</td><td align="left">div p</td><td align="left">select all p within div</td></tr><tr><td align="left">element&gt;element</td><td align="left">div&gt;p</td><td align="left">select p whose parent level is div</td></tr><tr><td align="left">element+element</td><td align="left">div+p</td><td align="left">select first p after div</td></tr><tr><td align="left">[attribute]</td><td align="left">[target]</td><td align="left">select elements with target attribute</td></tr><tr><td align="left">[attribute=value]</td><td align="left">[target=-blank]</td><td align="left">select elements with target=”-blank”</td></tr><tr><td align="left">[attribute~=value]</td><td align="left">[title~=flower]</td><td align="left">select elements whose title attribute contains “flower”</td></tr><tr><td align="left">[attribute</td><td align="left">=language]</td><td align="left">[lang</td></tr><tr><td align="left">:link</td><td align="left">a:link</td><td align="left">select link unvisited</td></tr><tr><td align="left">:visited</td><td align="left">a:visited</td><td align="left">select link visited</td></tr><tr><td align="left">:active</td><td align="left">a:active</td><td align="left">select active link</td></tr><tr><td align="left">:hover</td><td align="left">a:hover</td><td align="left">select when mouse hover link</td></tr><tr><td align="left">:focus</td><td align="left">input:focus</td><td align="left">select input element with focus</td></tr><tr><td align="left">:before</td><td align="left">p:before</td><td align="left">insert before p element</td></tr><tr><td align="left">:after</td><td align="left">p:after</td><td align="left">insert after p element</td></tr><tr><td align="left">element1~element2</td><td align="left">p~ul</td><td align="left">select all ul element after p</td></tr><tr><td align="left">[attribute^=value]</td><td align="left">a[src^=”https”]</td><td align="left">select element whose src attribute starts with “https”</td></tr><tr><td align="left">[attribute$=value]</td><td align="left">a[src$=”.pdf”]</td><td align="left">select element whose src attribute ends with “.pdf”</td></tr><tr><td align="left">[attribute*=value]</td><td align="left">a[src*=”runoob”]</td><td align="left">select element whose src attribute contains “runoob”</td></tr><tr><td align="left">:root</td><td align="left">:root</td><td align="left">select root element of document</td></tr><tr><td align="left">:empty</td><td align="left">p:empty</td><td align="left">select p element without siblings</td></tr></tbody></table><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre class="line-numbers language-HTML"><code class="language-HTML">    <!--back to top-->    <a href="#"></a>    <!--refresh page-->    <a href=""></a><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><ul><li>切换元素的类<pre class="line-numbers language-HTML"><code class="language-HTML">  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>  <script>  $(document).ready(function(){      $(".nav-item").hover(function(){      $(this).toggleClass("m-nav-show");      });  });  </script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Front_End </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scientific work</title>
      <link href="/2022/08/23/scientific-work/"/>
      <url>/2022/08/23/scientific-work/</url>
      
        <content type="html"><![CDATA[<h2 id="22-08-23"><a href="#22-08-23" class="headerlink" title="22/08/23"></a>22/08/23</h2><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><ol><li>While training model without style_transfer, the final model seems to be hard to handle images without much texture features.</li><li>the low SNR image &amp;&amp; obstacles like stars or keypoint_like &amp;&amp; small object</li><li>exists problems like symmetric point mismatches</li></ol><h2 id="22-08-25"><a href="#22-08-25" class="headerlink" title="22/08/25"></a>22/08/25</h2><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note:"></a>Note:</h3><ol><li>some keypoints unchecked, some keypoints miracly checked but with relative low response value</li><li>for wrong situations:<ul><li>seems like inplane features are learned while the intro-plane features are not seperate properly.</li><li>dark situation</li></ul></li><li>for true situations:<ul><li>with EPNP algorithm, the other wrong keypoints can be filtered for most cases. (happens with strong keypoint features)</li></ul></li></ol><h3 id="Current-dilemma"><a href="#Current-dilemma" class="headerlink" title="Current dilemma:"></a>Current dilemma:</h3><ol><li>training stage final touch around 0.7, hard to improve;</li><li>testing stage has difficult in handling textureless &amp; dark background situation</li></ol><h3 id="Currnet-summary"><a href="#Currnet-summary" class="headerlink" title="Currnet summary:"></a>Currnet summary:</h3><ol><li>training without style_transfer seems to be helpful for inplane keypoint relations.<br> By introducing the texture feature, the model will give out more proposals than before.</li></ol><h3 id="Current-try"><a href="#Current-try" class="headerlink" title="Current try:"></a>Current try:</h3><ol><li>improve keypoint punish factor to 2.</li></ol><h2 id="22-08-30"><a href="#22-08-30" class="headerlink" title="22/08/30"></a>22/08/30</h2><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ol><li>method need breakthrough. Try to extend the model length for better knowledge learning and expressing.</li><li>other context mixer methods. CCM | PSA</li></ol><h2 id="22-08-31"><a href="#22-08-31" class="headerlink" title="22/08/31"></a>22/08/31</h2><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><ol><li>model need basic train before applying DA;</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Log </tag>
            
            <tag> Graduate_work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium</title>
      <link href="/2022/08/18/selenium/"/>
      <url>/2022/08/18/selenium/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium-spider"><a href="#Selenium-spider" class="headerlink" title="Selenium spider"></a>Selenium spider</h1><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><pre class="line-numbers language-python"><code class="language-python">    pip install selenium    <span class="token comment" spellcheck="true"># download the browser driver ![chrome](https://chromedriver.storage.googleapis.com/index.html?path=104.0.5112.79/)</span>    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Element-hunter"><a href="#Element-hunter" class="headerlink" title="Element hunter"></a>Element hunter</h2><pre class="line-numbers language-python"><code class="language-python">    find_element_by_id<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_tag_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    fing_element_by_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_xpath<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_element_by_css_selector<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Browser-operation"><a href="#Browser-operation" class="headerlink" title="Browser operation"></a>Browser operation</h2><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>set_window_size<span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># clear the text</span>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># simulate the input</span>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># click the element</span>    search_text <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>    search_text<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'selenium'</span><span class="token punctuation">)</span>    search_text<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mouse-operation"><a href="#Mouse-operation" class="headerlink" title="Mouse operation"></a>Mouse operation</h2><ul><li>perform(): execute the actions stored in ActionChains</li><li>context_click(): right click</li><li>double_click(): double clicks</li><li>drag_and_drop(): drag element</li><li>move_to_element(): suspend above element</li></ul><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.cn'</span><span class="token punctuation">)</span>    above <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">"设置"</span><span class="token punctuation">)</span>    ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>above<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Keyboard-operation"><a href="#Keyboard-operation" class="headerlink" title="Keyboard operation"></a>Keyboard operation</h2><ul><li></li><li>send_keys()： <em>Keys.BACK_SPACE</em> <em>Keys.CONTROL, ‘a’</em> <em>Keys.F1</em></li></ul><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>BACK_SPACE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">    title <span class="token operator">=</span> driver<span class="token punctuation">.</span>title    now_url <span class="token operator">=</span> driver<span class="token punctuation">.</span>current_url    user <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'nums'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC    driver<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)</span>    element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    drivet<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://somedomain/url_that_delays_loading"</span><span class="token punctuation">)</span>    myDynamicElement <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"myDynamicElement"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># switch between windows</span>    xf <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="x-URS-iframe"'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># choose from select box</span>    <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>select <span class="token keyword">import</span> Select    Select<span class="token punctuation">(</span>xf<span class="token punctuation">)</span><span class="token punctuation">.</span>select_by_value<span class="token punctuation">(</span><span class="token string">'50'</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>switch_to_frame<span class="token punctuation">(</span>xf<span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>switch_to_default_content<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Alert-frame"><a href="#Alert-frame" class="headerlink" title="Alert frame"></a>Alert frame</h2><p><code>alert = driver.switch_to_alert()</code></p><ul><li>attribute: text | accept | dismiss | send_keys()</li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><pre class="line-numbers language-python"><code class="language-python">    driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'D:\\upload_file.txt'</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get_screenshot_as_file<span class="token punctuation">(</span><span class="token string">"D:\\baidu_img.jpg"</span><span class="token punctuation">)</span>    js <span class="token operator">=</span> <span class="token string">"window.scrollTo(100, 450);"</span>    driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAN_articles</title>
      <link href="/2022/08/18/gan-articles/"/>
      <url>/2022/08/18/gan-articles/</url>
      
        <content type="html"><![CDATA[<h2 id="GAN-Articles"><a href="#GAN-Articles" class="headerlink" title="GAN_Articles"></a>GAN_Articles</h2><h3 id="ON-Convergence-and-stability-of-GANs-2017"><a href="#ON-Convergence-and-stability-of-GANs-2017" class="headerlink" title="ON Convergence and stability of GANs(2017)"></a>ON Convergence and stability of GANs(2017)</h3><p><strong><em>Deep Regret Analytic Generative Adversarial Networks</em></strong></p><ol><li>regret minimization is the more appropriate way to think about GAN training dynamics</li><li>previous view off mode collapse and instability is that it results from <strong>attempting to minimize a strong divergence</strong> during training, authors argued to be not ture</li><li>mode collapse situations are often accompanied by sharp gradients of the discriminator function around some real data points</li><li>view alternating gradient updates procedures as regret minimization</li><li>prove the asymptotic convergence of GAN training in the non-parametric limit without requirements of discriminator to be optimal at each step</li><li>AGD can converge to a potentially bad local equilibrium in non-convex games and hypothesize this to be responsible for mode collapse</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> technology books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pose_Estimation</title>
      <link href="/2022/08/18/pose-estimation/"/>
      <url>/2022/08/18/pose-estimation/</url>
      
        <content type="html"><![CDATA[<p><strong>0818</strong></p><ol><li><p>strengthen the difference between keypoints<br> The problem why sometimes the model’s output mismatched is due to the weak feature learned for each keypoints.</p><p> And it comes to the dillima. We seem to enhance the feature difference by adding the texture which is indeed the thing we try to avoid by style transfer</p></li><li><p>strange observation<br> The Grammar correction in chrome limit the utterance comment to be one character input:D</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pose_Estimation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tutorial for online training</title>
      <link href="/2022/08/06/tutorial-for-online-training/"/>
      <url>/2022/08/06/tutorial-for-online-training/</url>
      
        <content type="html"><![CDATA[<h1 id="GPU-Online-Training-Tutorial"><a href="#GPU-Online-Training-Tutorial" class="headerlink" title="GPU Online Training Tutorial"></a>GPU Online Training Tutorial</h1><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ol><li>upload dataset and scripts by oss<pre class="line-numbers language-python"><code class="language-python"> oss login cp G<span class="token punctuation">:</span><span class="token operator">//</span>Datasets<span class="token operator">/</span>speedplus<span class="token punctuation">.</span>zip oss<span class="token punctuation">:</span><span class="token operator">//</span>datasets<span class="token operator">/</span> cp G<span class="token punctuation">:</span><span class="token operator">//</span>CodeSpace<span class="token operator">/</span>KE<span class="token punctuation">.</span>zip oss<span class="token punctuation">:</span><span class="token operator">//</span>datasets<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>upzip datasets &amp; project<pre class="line-numbers language-python"><code class="language-python"> oss cp oss<span class="token punctuation">:</span><span class="token operator">//</span>datasets<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>zip <span class="token operator">/</span>hy<span class="token operator">-</span>tmp<span class="token operator">/</span> ls <span class="token operator">/</span>hy<span class="token operator">-</span>tmp<span class="token operator">/</span> unzip <span class="token operator">-</span>d <span class="token operator">/</span>home<span class="token operator">/</span> <span class="token operator">/</span>hy<span class="token operator">-</span>tmp<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>zip <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>install necessary dependancies <pre class="line-numbers language-python"><code class="language-python"> pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><pre class="line-numbers language-python"><code class="language-python"> bash trainf1<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GPU Training </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DL_Model_Training</title>
      <link href="/2022/08/05/dl-model-training/"/>
      <url>/2022/08/05/dl-model-training/</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h3 id="load-model"><a href="#load-model" class="headerlink" title="load model"></a>load model</h3><p><strong><code>load_state_dict= net.state_dict</code></strong></p><pre class="line-numbers language-python"><code class="language-python">    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>checkpoint<span class="token punctuation">[</span><span class="token string">'net'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    model_dict <span class="token operator">=</span> net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    pretrained_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> checkpoint<span class="token punctuation">[</span><span class="token string">'net'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> k <span class="token keyword">in</span> model_dict<span class="token punctuation">}</span>    model_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span>pretrained_dict<span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="freeze-model"><a href="#freeze-model" class="headerlink" title="freeze model"></a>freeze model</h3><pre class="line-numbers language-python"><code class="language-python">    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Aadm<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">.</span>requires_grad<span class="token punctuation">,</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># unfreeze the fc2 layer for extra tuning if needed</span>    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">True</span>    net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">True</span>    optimizer<span class="token punctuation">.</span>add_param_group<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="load-optimizer"><a href="#load-optimizer" class="headerlink" title="load optimizer"></a>load optimizer</h3><pre class="line-numbers language-python"><code class="language-python">    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'initial_lr'</span><span class="token punctuation">:</span><span class="token number">0.001</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> <span class="token number">2.0e-3</span><span class="token punctuation">,</span> betas<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">.</span><span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Model Training </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Skills_Plus</title>
      <link href="/2022/07/26/python-skills-plus/"/>
      <url>/2022/07/26/python-skills-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li><p>zip</p><pre class="line-numbers language-python"><code class="language-python">  a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  zipped <span class="token operator">=</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  list<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span>  a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  list<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>  <span class="token keyword">from</span> zipfile <span class="token keyword">import</span> ZipFile  <span class="token keyword">import</span> os  <span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> basename  <span class="token keyword">with</span> ZipFile<span class="token punctuation">(</span><span class="token string">'sampleDir.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zipObj<span class="token punctuation">:</span>      <span class="token keyword">for</span> folderName<span class="token punctuation">,</span> subfolders<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>              filePath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>folderName<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>              zipObj<span class="token punctuation">.</span>write<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> basename<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>- Keywords```python    try:    except ZeroDivisionError:    finally:    global variable    non-local variable: rather than global, declares a variable to point to variable of outside enclosing function</code></pre><ul><li><p>print</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token comment" spellcheck="true"># without extraline</span>  l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>l<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># format output</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Total number is : %3d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{'Tom'} and {'Jerry'}"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Apple: {a:5d}, Orange: {o:8.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> o<span class="token operator">=</span><span class="token number">21.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  data <span class="token operator">=</span> dict<span class="token punctuation">(</span>fun<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">,</span> adj<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{a} and {b}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>operator</p><pre class="line-numbers language-python"><code class="language-python">  min <span class="token operator">=</span> a <span class="token operator">&lt;</span> b <span class="token operator">and</span> a <span class="token operator">or</span> b  <span class="token comment" spellcheck="true"># overload</span>  <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>a<span class="token operator">=</span>a      <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> o<span class="token punctuation">.</span>a  <span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> A<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># any &amp; all</span>  all<span class="token punctuation">(</span>empty iterable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># true</span>  any<span class="token punctuation">(</span>empty iterable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># false</span>  slice<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> step<span class="token punctuation">)</span>  setitem<span class="token punctuation">(</span>object<span class="token punctuation">,</span> position<span class="token punctuation">,</span> value<span class="token punctuation">)</span>  delitem<span class="token punctuation">(</span>object<span class="token punctuation">,</span> position<span class="token punctuation">)</span>  getitem<span class="token punctuation">(</span>object<span class="token punctuation">,</span> position<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># == &amp; is</span>   <span class="token string">"is"</span> check memory location<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>String</p><pre class="line-numbers language-python"><code class="language-python">  string <span class="token operator">=</span> r<span class="token string">'this is \110\145'</span> <span class="token comment" spellcheck="true"># ignore the escape sequences in a string</span>  <span class="token comment" spellcheck="true"># string alignment</span>  String1 <span class="token operator">=</span> <span class="token string">"|{:&lt;10}|{:^10}|{:>10}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>- Listlist are *mutable* while tuple is immutable```python    # store in a list using map, split and strip functions    lst = list(map(int, input(&quot;Enter the integer elements:&quot;).strip().split()))[:n]    lst.extend([2, &#39;a&#39;, &#39;hihi&#39;])    # apply function to list    import functools    functools.reduce(lambda a,b:a+b, lst)</code></pre><ul><li><p>Set<br>unordered, cannot access by index</p><pre class="line-numbers language-python"><code class="language-python">  set1  <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>  set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  set1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Dictionary</p><pre class="line-numbers language-python"><code class="language-python">  Dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  Dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Array</p><pre class="line-numbers language-python"><code class="language-python">  array<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Loop</p><pre class="line-numbers language-python"><code class="language-python">  L1<span class="token punctuation">,</span> L2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> a<span class="token punctuation">,</span>b <span class="token keyword">in</span> zip<span class="token punctuation">(</span>L1<span class="token punctuation">,</span> L2<span class="token punctuation">)</span><span class="token punctuation">:</span>  d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2></li><li><p>Variable-length arguments<br>*args: Non-Keyword Arguments<br>**kwargs: Keyword Arguments<br>function_name.<strong>doc</strong>: docstring of function</p></li></ul><p><strong>when we pass a variable to a function, a new reference to the object is created. Same as in Java</strong><br><strong>when we pass a reference and change the received reference to something else, the connection between the passed and received parameter is broken</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># pass by reference or pass by value </span>    <span class="token keyword">def</span> <span class="token function">myFun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">120</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    myFun<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>    myFun<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    myFun<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>yield</li></ul><p><em>Return</em> sends a specified value back to its caller whereas <em>Yield</em> can produce a sequence of values.</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">simpleGenerationFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token number">1</span>        <span class="token keyword">yield</span> <span class="token number">2</span>    x <span class="token operator">=</span> simpleGenerationFun<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>lambda</p><pre class="line-numbers language-python"><code class="language-python">  x <span class="token operator">=</span> <span class="token string">'Today is Saturday'</span>  <span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># filter &amp; map</span>  a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>  filtered <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>filtered<span class="token punctuation">)</span><span class="token punctuation">)</span>  mapped <span class="token operator">=</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>mapped<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>Functions are objects | can be passed as arguments to other functions | can return another function</strong></p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Functions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaggle_Competitons</title>
      <link href="/2022/06/30/space-titanic/"/>
      <url>/2022/06/30/space-titanic/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Feature-extraction"><a href="#Feature-extraction" class="headerlink" title="Feature extraction"></a>Feature extraction</h1><h2 id="Classic-methods"><a href="#Classic-methods" class="headerlink" title="Classic methods"></a>Classic methods</h2><pre class="line-numbers language-Python"><code class="language-Python">## PCAfrom sklearn.decomposition import PCAfrom matplotlib import pypylot as pltestimator = PCA(n_components=2)X_pca = estimator.fit_transform(X_digits)def plot_pca_scatter():    colors = ['black', 'blue', 'purple', 'yellow', 'white']    for i in xrange(len(colors)):        px = X_pca[:,0][y_digits==i]        py = x_pca[:, 1][y_digits==i]        plt.scatter(px, py, c=colors[i])    plt.legend(digits.target_names)    plt.xlabel('First Principal Component')    plt.ylabel('Second Principal Component')    plt.show()plot_pca_scatter()## Feature_Selectionfrom sklearn.cross_validation import cross_val_scorefrom sklearn import feature_selectionpercentiles = range(1,100,2)results = []for i in percentiles:    fs = feature_selection.SelectPercentile(feature_selection.chi2, percentile=i)    X_train_fs = fs.fit_transform(X_train, y_train)    scores = cross_val_score(dt, X_train_fs, t_train, cv=5)    results = np.append(results, scores.mean())print(results)## Grid_Searchfrom sklearn.pipeline import Pipelineclf = Pipeline([('vect', TfidfVectorizer()), ('svc',SVC())])parameters = {'svc_gamma': np.logspace(-1,2,4), 'svc_C': np.logspace(-1,1,3)}gs = GridSearchCV(clf, parameters, verbose=2, refit=True, cv=3)print(gs.best_params_, gs.best_score_, gs.score(X_test, y_test))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Kaggle-Spaceship-Titanic"><a href="#Kaggle-Spaceship-Titanic" class="headerlink" title="Kaggle-Spaceship Titanic"></a>Kaggle-Spaceship Titanic</h2><ol><li><p>Data Statistics</p><ul><li>passengerId: unique ID. Format gggg_pp. gggg indicates passengers travel with same group</li><li>HomePlanet: discrete noun. can be replaced by digits.</li><li>CryoSleep: bool value. seems relevent to final result.</li><li>Cabin: deck/num/side. seems relevent to final result. need further discussion</li><li>Destination: like HomePlanet.</li><li>Age: discrete digits. can be assembled as bins.</li><li>VIP: bool value.</li><li>RoomService, FoodCourt, ShoppingMall, Spa, VRDeck: bill amount. process as Age.</li><li>Name: no use.</li><li>Transported: final results.</li></ul></li><li><p>Data Preprocess</p><ul><li>null value | error value :<br>mean, zero, etc depends on circumstance</li></ul></li><li><p>Model Training Strategy</p><ul><li>Decision Tree | RandomForest | KNN Classifier</li><li>K-Folder crossover</li></ul></li></ol><h2 id="Notifications"><a href="#Notifications" class="headerlink" title="Notifications"></a>Notifications</h2><ol><li>NaN</li></ol><ul><li>Generally speaking, we need to process the NaN value first in the purpose of avoiding the influence for the sequence operations.<br>Nan +/ -/ /* / sth equals Nan</li><li>the <em>NaN</em> value filled should be returned to origin position or just add the <strong>inplace=True</strong> so as to maintain the changes.</li></ul><ol start="2"><li><p>Kaggle strategy</p><pre class="line-numbers language-Python"><code class="language-Python"> # data description from pandas_profiling import ProfileReport profile = ProfileReport(train_df, title='Profileing Report') # data preprocess train_df.drop('Name', axis=1, inplace=True) train_df['Transported'].replace(True, 1, inplace=True) trian_df[['deck', 'num', 'side']] = train_df['Cabin'].str.split('/', expand=True) col_to_sum = ['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck'] train_df['SumSpends'] = train_df[col_to_sum].sum(axis=1) null_cols = train_df.isnull().sum().sort_values(ascending=True) null_cols = list(null_cols[null_cols>1].index) object_cols = [col for col in train_df.columns if train_df[col].dtype=='object' or train_df[col].dtype=='category'] numeric_cols = [col for col in train_df.columns if train_df[col].dtype=='float64'] from sklearn.preprocessing import OrdinalEncoder oc = OrdinalEncoder() df_for_encode = pd.concat([train_df, test_df]) df_for_encode[object_cols] = df_for_encode[object_cols].astype('category') df_for_encode[object_cols] = oc.fit_transform(df_for_encode[object_cols]) from sklearn.impute import SimpleImputer from sklearn.compose import ColumnTransformer ct = ColumnTransformer([('imp', SimpleImputer(strategy='mean'), null_cols)]) train_df[null_cols] = ct.fit_transform(train_df[null_cols]) # Backward feature selection from sklearn.feature_selection import SequentialFeatureSelector model_fs = CatBoostClassifier(verbose=False) sf = SequentialFeatureSelector(model_fs, scoring='accuracy', direction='backward') sf.fit(X, y) best_features = list(sf.get_feature_names_out())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>```</p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Feature Extraction </tag>
            
            <tag> Kaggle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch_base</title>
      <link href="/2022/05/26/pytorch-base/"/>
      <url>/2022/05/26/pytorch-base/</url>
      
        <content type="html"><![CDATA[<h1 id="natural-languare-processing"><a href="#natural-languare-processing" class="headerlink" title="natural languare processing"></a>natural languare processing</h1><h2 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h2><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ol><li>view() 只改变观察角度</li><li>numpy() from_numpy() 与原始张量共享同一块内存</li></ol><h3 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism"></a>Mechanism</h3><ul><li>broadcast 自动补齐，维度不足前面加1</li><li>autograd<br>|||<br>|no tracking | tracking|<br>|<code>with torch.no_grad()   .detach()</code>|<code>requires_grad=True x.grad</code>|</li><li><em>torch.nn</em> 实现高层API | <em>torch.nn.functional</em> 实现低层API(仅仅运算功能)</li><li>super(Linear, self).init()继承<em>nn.module</em>的构造函数</li><li><em><strong>init</strong>()</em>层中储存具有可学习参数的层，通过<strong>nn.Parameter()</strong>以parameter形式保存在Module中</li></ul><h2 id="Language-Model"><a href="#Language-Model" class="headerlink" title="Language Model"></a>Language Model</h2><h3 id="n-gram-Model"><a href="#n-gram-Model" class="headerlink" title="n-gram Model"></a>n-gram Model</h3><ul><li>uni bi tri<h3 id="数据缺失"><a href="#数据缺失" class="headerlink" title="数据缺失"></a>数据缺失</h3></li><li>加法平滑</li><li>折扣法</li><li>插值法<h3 id="Wordvector"><a href="#Wordvector" class="headerlink" title="Wordvector"></a>Wordvector</h3></li><li>Continuous Bag-of-Words: 上下文预测中间词</li><li>Skip-gram<h3 id="Hierarchical-Softmax-Negative-Sample"><a href="#Hierarchical-Softmax-Negative-Sample" class="headerlink" title="Hierarchical Softmax  Negative Sample"></a>Hierarchical Softmax  Negative Sample</h3></li><li>哈夫曼树构造：权重低码长长，降低计算复杂度</li><li>Global Vectors:统计全局词汇共现信息学习词向量</li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Skills</title>
      <link href="/2022/04/01/python-skills/"/>
      <url>/2022/04/01/python-skills/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><ul><li><p>matplotlib.backend_bases.FigureCanvas </p></li><li><p>matplotlib.backend_bases.Renderer</p></li><li><p>matplotlib.artist.Artist 调用Renderer接口在Canvas绘图</p><ul><li>primitives: 标准图形对象(Line2D, text, Rectangle, image)</li><li>containers: figure, Axes, Axis<h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3></li></ul></li><li><p>annotate </p></li><li><p>errorbar | pie | GridSpec(非均匀子图)</p><h2 id="Python-tips"><a href="#Python-tips" class="headerlink" title="Python tips"></a>Python tips</h2><h3 id="map替换标签"><a href="#map替换标签" class="headerlink" title="map替换标签"></a>map替换标签</h3><pre class="line-numbers language-python"><code class="language-python">  c<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>  a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="text-encoder"><a href="#text-encoder" class="headerlink" title="text encoder"></a>text encoder</h3></li><li><p>sklearn.preprocessing.LabelEncoder(): <em>编码不连续数值或文本</em></p><ul><li><code>le.fit() | le.transform() | le.inverse_transform() | le.classes_</code></li></ul></li><li><p>sklearn.preprocessing.OneHotEncoder():<em>分类特征可能取值转变为二值特征</em></p><h3 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h3></li><li><p>隐藏<em>python</em>级别的警告</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> warnings    warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="variable-save"><a href="#variable-save" class="headerlink" title="variable save"></a>variable save</h3></li><li><p>shelve</p><pre class="line-numbers language-python"><code class="language-python">      <span class="token keyword">import</span> shelve      shelfFile <span class="token operator">=</span> shelve<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'mydata'</span><span class="token punctuation">)</span>      cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Zonphie'</span><span class="token punctuation">,</span> <span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'Simon'</span><span class="token punctuation">]</span>      shelfFile<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cat      shelfFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>pprint.pformat()</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> pprint  cats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Zonphie'</span><span class="token punctuation">,</span> <span class="token string">'desc'</span><span class="token punctuation">:</span><span class="token string">'chubby'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Pooka'</span><span class="token punctuation">,</span><span class="token string">'desc'</span><span class="token punctuation">:</span><span class="token string">'fluffy'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  fileObj <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'myCats.py'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  fileObj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'cats = '</span> <span class="token operator">+</span> pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>cats<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>  fileObj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="File-amp-Folder"><a href="#File-amp-Folder" class="headerlink" title="File &amp; Folder"></a>File &amp; Folder</h3></li><li><p>删除文件: <code>os.unlink(path)</code></p></li><li><p>删除空文件夹: <code>os.rmdir(path)</code></p></li><li><p>删除整个文件夹: <code>shutil.rmtree(path)</code></p></li><li><p>可恢复删除: </p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> send2trash  send2trash<span class="token punctuation">.</span>send2trash<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>遍历目录树: <code>os.walk(path)</code> 返回当前文件夹、子文件夹、文件</p><h4 id="zipfile"><a href="#zipfile" class="headerlink" title="zipfile"></a>zipfile</h4><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> zipfile  newZip <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'new.zip'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'micky.txt'</span><span class="token punctuation">,</span> compress_type<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZIP_EDFLATED<span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解压缩</span>  <span class="token keyword">import</span> os  newZip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token string">'.\\zip'</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'animals/micky.txt'</span><span class="token punctuation">,</span> <span class="token string">'G:\\animals\\folders'</span><span class="token punctuation">)</span>  newZip<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="file-search"><a href="#file-search" class="headerlink" title="file search"></a>file search</h4><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> glob  glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.txt'</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> fnmatch  fnmatch<span class="token punctuation">.</span>fnmatch<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># MD5判断重复文件</span>  <span class="token keyword">import</span> hashlib  m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>  f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'bacon.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>  m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  md5_value <span class="token operator">=</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="automatic-mail"><a href="#automatic-mail" class="headerlink" title="automatic mail"></a>automatic mail</h4><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> smtplib  <span class="token keyword">from</span> smtplib <span class="token keyword">import</span> SMTP_SSL <span class="token comment" spellcheck="true"># 加密邮件内容</span>  <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText  <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>image <span class="token keyword">import</span> MIMEImage  <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMlutipart  <span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header  host_server <span class="token operator">=</span> <span class="token string">'smtp.163.com'</span> <span class="token comment" spellcheck="true"># smtp server address</span>  sender_163 <span class="token operator">=</span> <span class="token string">'pythonauto_email@163.com'</span>  pwd <span class="token operator">=</span> <span class="token string">'DAFAPFAGGFA'</span> <span class="token comment" spellcheck="true">#邮件授权码</span>  receiver <span class="token operator">=</span> <span class="token string">'mingming@buaa.edu.cn'</span>  msg <span class="token operator">=</span> MIMEMlutipart<span class="token punctuation">(</span><span class="token punctuation">)</span>  mail_title <span class="token operator">=</span> <span class="token string">'automatic pythonauto_email'</span>  msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>mail_title<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender_163  msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  mail_content <span class="token operator">=</span> <span class="token string">'today is a sunny day'</span>  message_text <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>mail_content<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>message_text<span class="token punctuation">)</span>  image_data <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'G:\\image\\zpphine.jpg'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>  message_image <span class="token operator">=</span> MIMEImage<span class="token punctuation">(</span>image_data<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  image_data<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>message_image<span class="token punctuation">)</span>  atta <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'G:\\cat.xlsx'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>  atta<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename="cat.xlsx"'</span>  msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>atta<span class="token punctuation">)</span>  smtp <span class="token operator">=</span> SMTP_SSL<span class="token punctuation">(</span>host_server<span class="token punctuation">)</span>  smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender_163<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>  smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender_163<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mail has been send successfully!'</span><span class="token punctuation">)</span>  smtp<span class="token punctuation">.</span>quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><p>依赖:openpyxl, xlrd, xlwings</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> openpyxl  wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'G:\\habits.xlsx'</span><span class="token punctuation">)</span>  sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>get_sheet_by_name<span class="token punctuation">(</span><span class="token string">'Sheet3'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># obtain data via rows</span>  rows <span class="token operator">=</span> sheet<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>      <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create new sheet</span>  <span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook  wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>  sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'mysheet'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># write formula</span>  sheet<span class="token punctuation">[</span><span class="token string">'D1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'=SUM(D2:D14)'</span>  wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'formula.xlsx'</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> xlwings <span class="token keyword">as</span> xw  app <span class="token operator">=</span> xw<span class="token punctuation">.</span>App<span class="token punctuation">(</span>visible<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> add_book<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  wb <span class="token operator">=</span> app<span class="token punctuation">.</span>books<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'formula.xlsx'</span><span class="token punctuation">)</span>  wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>  wb<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># basic options</span>  sheet<span class="token punctuation">.</span>insert_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  sheet<span class="token punctuation">.</span>delete_cols<span class="token punctuation">(</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>amount<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>  sheet<span class="token punctuation">.</span>move_range<span class="token punctuation">(</span><span class="token string">'A1:B2'</span><span class="token punctuation">,</span> rows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cols<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="decorate"><a href="#decorate" class="headerlink" title="decorate"></a>decorate</h3><ul><li>统一模板：<pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps  <span class="token keyword">def</span> <span class="token function">decorate</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>      @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>          result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>          <span class="token keyword">return</span> result      <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Pandas-tips"><a href="#Pandas-tips" class="headerlink" title="Pandas tips"></a>Pandas tips</h2><h3 id="datatime"><a href="#datatime" class="headerlink" title="datatime"></a>datatime</h3><ul><li><p>to_datetime | .dt.dayofweek | .dt.month</p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3></li><li><p>loc:通过选取标签索引数据<br>  <strong>标签索引会将切片末端包含进去</strong></p><pre class="line-numbers language-python"><code class="language-python">      df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'index0'</span><span class="token punctuation">]</span>      df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'index0'</span><span class="token punctuation">:</span><span class="token string">'index3'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>iloc:通过选取位置编号索引数据<br>  <strong>位置编号索引不会将切片末端包含进去</strong></p><pre class="line-numbers language-python"><code class="language-python">      df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>reset_index: 修改索引行，设置<em>drop=True</em>可丢弃原索引列</p></li><li><p>sort_values(by=’a’, ascending=True) | sort_index(axis=1)</p></li><li><p>data_analyse func</p><pre class="line-numbers language-python"><code class="language-python">  df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数据基本信息</span>  df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>  df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> value<span class="token operator">=</span>values<span class="token punctuation">)</span>  df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  df <span class="token operator">=</span> df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'AgeBand'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'AgeBand'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder  <span class="token keyword">for</span> feat <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Cabin'</span><span class="token punctuation">,</span> <span class="token string">'Ticket'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      lbl <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>      label_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> range<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      df<span class="token punctuation">[</span>feat<span class="token operator">+</span> <span class="token string">"_labelEncode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>label_dict<span class="token punctuation">)</span>      df<span class="token punctuation">[</span>feat <span class="token operator">+</span> <span class="token string">"_labelEncode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> lbl<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Onehot encoder</span>  <span class="token keyword">for</span> feat <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">,</span> <span class="token string">"Embark"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      x <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">,</span> prefix<span class="token operator">=</span>feat<span class="token punctuation">)</span>      df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  df<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>str<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'()'</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 数据重构</span>  pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span> left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  result_up<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_down<span class="token punctuation">)</span>  pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>result_up<span class="token punctuation">,</span> result_down<span class="token punctuation">]</span><span class="token punctuation">)</span>  text_left_up<span class="token punctuation">.</span>join<span class="token punctuation">(</span>text_right_up<span class="token punctuation">)</span>  result<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#列旋转为行</span>  result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 行旋转为列</span>  text<span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Fare'</span><span class="token punctuation">:</span><span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'Pclass'</span><span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Fare'</span><span class="token punctuation">:</span><span class="token string">'mean_fare'</span><span class="token punctuation">,</span><span class="token string">'Pclass'</span><span class="token punctuation">:</span><span class="token string">'count_pclass'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">,</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span>stacked<span class="token operator">=</span><span class="token string">'True'</span><span class="token punctuation">)</span>  facet <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>text<span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span> aspect<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  facet<span class="token punctuation">.</span>map<span class="token punctuation">(</span>sns<span class="token punctuation">.</span>kdeplot<span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> shade<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  facet<span class="token punctuation">.</span>set<span class="token punctuation">(</span>xlim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  facet<span class="token punctuation">.</span>add_legend<span class="token punctuation">(</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>text<span class="token punctuation">.</span>Pclass<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>text<span class="token punctuation">.</span>Pclass<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>  text<span class="token punctuation">.</span>Age<span class="token punctuation">[</span>text<span class="token punctuation">.</span>Pclass<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>model = [&#39;rfc&#39;, &#39;gddt&#39;]temp = []rfc = RandomForestClassifier(random_state=0)params = {&#39;n_estimators&#39;:[50, 100]}temp.append([rfc, params])for i in range(len(model)):    best_model = GridSearchCV(temp[i][0], param_grid=temp[i][1], refit=True, cv=5).fit(train, train_label)    print(model[i], &#39;:&#39;)    print(&#39;best parameters:&#39;, best_model.best_params_)</code></pre><pre><code># Pytorch ## Function### Tips- clone():不共享数据内存，但提供梯度回溯- detach():共享数据内存，不提供梯度回溯- new_tensor():不共享不提供- 类型转换: ```python    tensor.type(torch.IntTensor)    tensor.type_as(tensor)    tensor.int()</code></pre><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul><li>Sequential:简单串联各层计算，接收OrderedDict或者子模块作为参数<pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn  net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>      nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用OrderedDict</span>  <span class="token keyword">import</span> collections  net2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>      collections<span class="token punctuation">.</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>          <span class="token punctuation">(</span><span class="token string">'fc1'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token string">'relu1'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>RelU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token string">'fc2'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h2><ul><li><p>Hook</p><pre class="line-numbers language-python"><code class="language-python">          <span class="token keyword">class</span> <span class="token class-name">Hook</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                  self<span class="token punctuation">.</span>module_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  self<span class="token punctuation">.</span>features_in_hook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  self<span class="token punctuation">.</span>features_out_hook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> fea_in<span class="token punctuation">,</span> fea_out<span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hooker working"</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>module_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>module<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>feature_in_hook<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fea_in<span class="token punctuation">)</span>                  self<span class="token punctuation">.</span>features_out_hook<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fea_out<span class="token punctuation">)</span>          <span class="token keyword">def</span> <span class="token function">plot_feature</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>              hh <span class="token operator">=</span> Hook<span class="token punctuation">(</span><span class="token punctuation">)</span>              model<span class="token punctuation">.</span>features<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>register_forward_hook<span class="token punctuation">(</span>hh<span class="token punctuation">)</span>              forward_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>hh<span class="token punctuation">.</span>module_name<span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>hh<span class="token punctuation">.</span>features_in_hook<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>hh<span class="token punctuation">.</span>features_out_hook<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>              out1 <span class="token operator">=</span> hh<span class="token punctuation">.</span>features_out_hook<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>              total_ft <span class="token operator">=</span> out1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>              first_item <span class="token operator">=</span> out1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>              plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">for</span> ftidx <span class="token keyword">in</span> range<span class="token punctuation">(</span>total_ft<span class="token punctuation">)</span><span class="token punctuation">:</span>                  <span class="token keyword">if</span> ftidx<span class="token operator">></span> <span class="token number">99</span><span class="token punctuation">:</span>                      <span class="token keyword">break</span>                  ft <span class="token operator">=</span> first_item<span class="token punctuation">[</span>ftidx<span class="token punctuation">]</span>                  plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> ftidx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                  plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>                  plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>ft<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CAM</p><pre class="line-numbers language-python"><code class="language-python">          <span class="token keyword">import</span> torch          <span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">import</span> vgg11<span class="token punctuation">,</span> resnet18<span class="token punctuation">,</span> resnet101<span class="token punctuation">,</span> resnext101_32x8d          <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt          <span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image          <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np          model <span class="token operator">=</span> vgg11<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>          img_path <span class="token operator">=</span> <span class="token string">'./dog.jpg'</span>          img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span>          rgb_img <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>          plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>          <span class="token keyword">from</span> pytorch_grad_cam <span class="token keyword">import</span> GradCAM<span class="token punctuation">,</span> ScoreCAM<span class="token punctuation">,</span> GradCAMPlusPlus<span class="token punctuation">,</span> AblationCAM<span class="token punctuation">,</span> XGradCAM<span class="token punctuation">,</span> EigenCAM<span class="token punctuation">,</span> FullGradCAM          <span class="token keyword">from</span> pytorch_grad_cam<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>model_targets <span class="token keyword">import</span> ClassifierOutputTarget          <span class="token keyword">from</span> pytorch_grad_cam<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>image <span class="token keyword">import</span> show_cam_on_image          <span class="token comment" spellcheck="true"># ScoreCAM 和AblationCAM需要batch_size</span>          target_layers <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">.</span>feature<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>          cam <span class="token operator">=</span> GradCAM<span class="token punctuation">(</span>model<span class="token operator">=</span>model<span class="token punctuation">,</span> target_layers<span class="token operator">=</span>target_layers<span class="token punctuation">)</span>          targets <span class="token operator">=</span> <span class="token punctuation">[</span>ClassifierOutputTarget<span class="token punctuation">]</span>          grayscale_cam <span class="token operator">=</span> cam<span class="token punctuation">(</span>input_tensor<span class="token operator">=</span>img_tensor<span class="token punctuation">,</span> targets<span class="token operator">=</span>targets<span class="token punctuation">)</span>          grayscale_cam <span class="token operator">=</span> grayscale_cam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>          cam_img <span class="token operator">=</span> show_cam_on_image<span class="token punctuation">(</span>rgb_img<span class="token punctuation">,</span> grayscale_cam<span class="token punctuation">,</span> use_rgb<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>cam_img<span class="token punctuation">)</span><span class="token punctuation">)</span>          Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>cam_img<span class="token punctuation">)</span>      ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>FlashTorch</p><pre><code>  ```python      import matplotlib.pyplot as plt      import torchvision.models as models      from flashtorch.utils import apply_transforms, load_image      from flashtorch.saliency import Backprop      model = models.alexnet(pretrained=True)      backprop = Backprop(model)      image = load_image(&#39;./image.jpg&#39;)      owl = apply_transforms(image)      target_class = 24      backprop.visualize(owl, target_class, guided=True, use_gpu=True)  ```</code></pre></li></ul><h2 id="Emotion-Classifier-APIs"><a href="#Emotion-Classifier-APIs" class="headerlink" title="Emotion Classifier APIs"></a>Emotion Classifier APIs</h2><ul><li><p>HuggingFace</p><pre class="line-numbers language-python"><code class="language-python">      <span class="token keyword">from</span> transformers <span class="token keyword">import</span> DistilBertTokenizerFast      <span class="token keyword">from</span> transformers <span class="token keyword">import</span> TFDistilBertForSequenceClassification<span class="token punctuation">,</span> TFTrainer<span class="token punctuation">,</span> TFTrainingArguments      tokenizer <span class="token operator">=</span> DistilBertTokenizerFast<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'distilbert-base-uncased'</span><span class="token punctuation">)</span>      train_encodings <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>train_texts<span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      val_encodings <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>val_texts<span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      test_encodings <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>test_texts<span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      training_args <span class="token operator">=</span> TFTrainingArguments<span class="token punctuation">(</span>          output_dir<span class="token operator">=</span><span class="token string">'./results'</span><span class="token punctuation">,</span>          num_train_epochs<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>          per_device_train_batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>          per_device_eval_batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>          warmup_steps<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>          weight_decay<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>          logging_dir<span class="token operator">=</span><span class="token string">'./logs'</span><span class="token punctuation">,</span>          logging_steps<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span>      model <span class="token operator">=</span> TFDistilBertForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'distilbert-base-uncased'</span><span class="token punctuation">)</span>      trainer <span class="token operator">=</span> TFTrainer<span class="token punctuation">(</span>          model<span class="token operator">=</span>model<span class="token punctuation">,</span>          args<span class="token operator">=</span>training_args<span class="token punctuation">,</span>          train_dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span>          eval_dataset<span class="token operator">=</span>eval_dataset<span class="token punctuation">)</span>      trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>simpletransformers</p><pre class="line-numbers language-python"><code class="language-python">      <span class="token keyword">from</span> simpletransformers<span class="token punctuation">.</span>classification <span class="token keyword">import</span> ClassificationModel      train_args <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">'num_train_epochs'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>          <span class="token string">'train_batch_size'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>          <span class="token string">'eval_batch_size'</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span>          <span class="token string">'warmup_steps'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>          <span class="token string">'weight_decay'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span>          <span class="token string">'logging_steps'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>          <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> <span class="token number">5e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>          <span class="token string">'fp16'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>          <span class="token string">'wandb_project'</span><span class="token punctuation">:</span> <span class="token string">'gallery'</span><span class="token punctuation">,</span>          <span class="token string">'wandb_kwargs'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'entity'</span><span class="token punctuation">:</span> <span class="token string">'wandb'</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>      model <span class="token operator">=</span> ClassificationModel<span class="token punctuation">(</span><span class="token string">'distilbert'</span><span class="token punctuation">,</span> <span class="token string">'distilbert-base-uncased'</span><span class="token punctuation">,</span> use_cuda<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> cuda_device<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args<span class="token operator">=</span>train_args<span class="token punctuation">)</span>      model<span class="token punctuation">.</span>train_model<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Gradient-Boosting-Descent-Machine"><a href="#Gradient-Boosting-Descent-Machine" class="headerlink" title="Gradient Boosting Descent Machine"></a>Gradient Boosting Descent Machine</h2><p><img src="https://zhuanlan.zhihu.com/p/99069186" alt="参考链接"></p><ul><li><p>GBDM: 每次迭代都需要遍历整个训练数据多次</p></li><li><p>XGBOOST: 基于预排序方法的决策树算法</p><ul><li>Level-wise 增长策略:不容易过拟合，容易进行多线程优化，控制模型复杂度，但效率较低</li><li>Modified Preorder Tree Taversal: 用于层级关系的存储和遍历, 解决邻接表递归查询低效问题，但不适用于增删改操作较多的场景<br>  <img src="https://zhuanlan.zhihu.com/p/91176792" alt="参考链接"><pre class="line-numbers language-sql"><code class="language-sql">      <span class="token comment" spellcheck="true"># 创建数据表</span>      <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">'product_category'</span> <span class="token punctuation">(</span>          <span class="token string">'id'</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>          category_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>          left_value <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>          right_value <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>          <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">      <span class="token comment" spellcheck="true"># 插入子分类</span>      <span class="token keyword">INSERT</span> <span class="token keyword">into</span> product_category<span class="token punctuation">(</span>category_name<span class="token punctuation">,</span> <span class="token string">'left_value'</span><span class="token punctuation">,</span> <span class="token string">'right_value'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 插入数据</span>      <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'food'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 锁表 防止被同时修改导致数据不一致</span>      <span class="token keyword">lock</span> <span class="token keyword">table</span> <span class="token string">'product_category'</span> <span class="token keyword">write</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 插入子分类</span>      <span class="token keyword">select</span> <span class="token variable">@myLeft</span> :<span class="token operator">=</span> <span class="token string">'left_value'</span>       <span class="token keyword">from</span> <span class="token string">'product_category'</span>      <span class="token keyword">where</span> category_name <span class="token operator">=</span> <span class="token string">'food'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 更新受影响分类左右区间值</span>      <span class="token keyword">update</span> product_category <span class="token keyword">SET</span> left_value<span class="token operator">=</span>left_value <span class="token operator">+</span><span class="token number">2</span> <span class="token keyword">where</span> left_value<span class="token operator">></span><span class="token variable">@myLeft</span><span class="token punctuation">;</span>      <span class="token keyword">update</span> product_category      <span class="token keyword">SET</span> right_value<span class="token operator">=</span>right_value <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">where</span> right_value<span class="token operator">></span><span class="token variable">@myLeft</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 插入子分类信息</span>      <span class="token keyword">INSERT</span> <span class="token keyword">into</span> product_category<span class="token punctuation">(</span>category_name<span class="token punctuation">,</span> <span class="token string">'left_value'</span><span class="token punctuation">,</span> <span class="token string">'right_value'</span><span class="token punctuation">)</span>      <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'meat'</span><span class="token punctuation">,</span> <span class="token variable">@myLeft</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">@myLeft</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 解除锁表</span>      unlock <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">      <span class="token comment" spellcheck="true"># 查询指定分类子分类</span>      <span class="token keyword">select</span> <span class="token variable">@myLeft</span> :<span class="token operator">=</span> <span class="token string">'left_value'</span><span class="token punctuation">,</span> <span class="token variable">@myRight</span> :<span class="token operator">=</span> <span class="token string">'right_value'</span>      <span class="token keyword">from</span> <span class="token string">'product_category'</span>      <span class="token keyword">where</span> <span class="token string">'category_name'</span><span class="token operator">=</span><span class="token string">'meat'</span><span class="token punctuation">;</span>      <span class="token keyword">select</span> <span class="token operator">*</span>       <span class="token keyword">from</span> <span class="token string">'product_caegory'</span>      <span class="token keyword">where</span> <span class="token string">'left_value'</span> <span class="token operator">>=</span> <span class="token variable">@myLeft</span> <span class="token operator">and</span> <span class="token string">'right_value'</span> <span class="token operator">&lt;=</span> <span class="token variable">@myRight</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>LightGBM: </p><ul><li>基于Histogram的决策树算法<ul><li>内存占用少，计算代价小</li><li>差加速: 叶子节点直方图由父节点和相邻节点作差得到，<strong>只使用非零特征构建直方图</strong></li></ul></li><li>Leaf_wise 增长策略<ul><li>在分裂次数相同的情况下，可以降低更多的误差</li><li>但可能会长出比较深的决策树，产生过拟合，需要增加最大深度限制，在保证高效率的同时防止过拟合    </li></ul></li><li>Gradient-based One-Side Sampling: 从减少样本的角度出发，排除大部分对计算信息增益没有帮助的小梯度样本</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Functions </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
